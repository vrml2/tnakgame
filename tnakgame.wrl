#VRML V2.0 utf8

PROTO EventCapture [
  field SFColor color 0.25 0.25 1
  field SFVec3f location 0 0 0
  field SFVec3f scale 1 1 1 
  field SFString name "test"
  field SFBool colon TRUE
  
  eventIn SFBool SFBoolIn 
  eventIn SFColor SFColorIn
  eventIn MFColor MFColorIn  
  eventIn SFFloat SFFloatIn
  eventIn MFFloat MFFloatIn 
  eventIn SFImage SFImageIn
  eventIn SFInt32 SFInt32In 
  eventIn MFInt32 MFInt32In
  eventIn SFNode SFNodeIn 
  eventIn MFNode MFNodeIn
  eventIn SFRotation SFRotationIn
  eventIn MFRotation MFRotationIn 
  eventIn SFString SFStringIn
  eventIn MFString MFStringIn
  eventIn SFTime SFTimeIn
  eventIn MFTime MFTimeIn 
  eventIn SFVec2f SFVec2fIn
  eventIn MFVec2f MFVec2fIn
  eventIn SFVec3f SFVec3fIn
  eventIn MFVec3f MFVec3fIn
  field MFString justify "BEGIN"
]
{
Transform {
  translation IS location
  scale IS scale
  children [
    Shape {
      appearance Appearance {
        material Material {
          emissiveColor IS color
          diffuseColor 0 0 0
        }
      }
      geometry DEF disp Text {
        fontStyle FontStyle {
          style "BOLD"
          family "SANS"
          justify IS justify
        }
      }
    }
  ]
}
DEF sc Script {
  field SFBool colon IS colon
  field SFString name IS name
  field SFNode disp USE disp
 
  eventIn SFBool SFBoolIn IS SFBoolIn 
  eventIn SFColor SFColorIn IS SFColorIn
  eventIn MFColor MFColorIn IS MFColorIn  
  eventIn SFFloat SFFloatIn IS SFFloatIn
  eventIn MFFloat MFFloatIn IS MFFloatIn 
  eventIn SFImage SFImageIn IS SFImageIn
  eventIn SFInt32 SFInt32In IS SFInt32In 
  eventIn MFInt32 MFInt32In IS MFInt32In
  eventIn SFNode SFNodeIn IS SFNodeIn
  eventIn MFNode MFNodeIn IS MFNodeIn
  eventIn SFRotation SFRotationIn IS SFRotationIn
  eventIn MFRotation MFRotationIn IS MFRotationIn 
  eventIn SFString SFStringIn IS SFStringIn
  eventIn MFString MFStringIn IS MFStringIn
  eventIn SFTime SFTimeIn IS SFTimeIn
  eventIn MFTime MFTimeIn IS MFTimeIn 
  eventIn SFVec2f SFVec2fIn IS SFVec2fIn
  eventIn MFVec2f MFVec2fIn IS MFVec2fIn
  eventIn SFVec3f SFVec3fIn IS SFVec3fIn
  eventIn MFVec3f MFVec3fIn IS MFVec3fIn

  directOutput TRUE
  url ["javascript:
    function initialize(){
      disp.string[0] = name	;
    }
    function SFBoolIn(value,tm){
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFColorIn(value,tm){  
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
    function MFColorIn(value,tm){  
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
    function SFFloatIn(value,tm){  
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
    function MFFloatIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFImageIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFInt32In(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function MFInt32In(value,tm){          
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFNodeIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
    function MFNodeIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
    function SFRotationIn(value,tm){       
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
    function MFRotationIn(value,tm){       
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFStringIn(value,tm){         
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function MFStringIn(value,tm){         
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFTimeIn(value,tm){            
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }															 
    function MFTimeIn (value,tm){          
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFVec2fIn(value,tm){          
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function MFVec2fIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function SFVec3fIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value;
    }
    function MFVec3fIn(value,tm){           
      disp.string[0] = colon ? name + ': ' + value : name + value ;
    }
  "]
}
}

PROTO Tank [
  field SFInt32 decPlaces 1
  field SFString name "bulldog"
  field SFColor color 1 1 1
  exposedField SFRotation orientation 0 0 0 0
  exposedField SFVec3f location 0 0 0
  exposedField SFVec3f scale 1 1 1
  field SFInt32 tankID 0  
  field SFFloat expr 4.5
  field SFFloat expt 2
  field SFFloat maxDam 500
  field	SFFloat	hp 1000
  field	SFFloat	defhp 1000

  eventIn  SFString set_name
  eventIn  SFColor  set_color
  eventIn  SFBool   exist

  eventIn  SFTime     get_angles
  eventOut MFRotation calibrate_angles
  eventIn  SFTime     shot_set
  eventIn  MFVec3f    expLocation
  eventIn  SFVec2f    expRadius
  eventIn  MFRotation set_angles
  eventOut MFVec3f    explosionOut
  eventOut MFVec3f    set_fire_order
  eventOut MFFloat    health
  eventOut SFString   nameOut
  field SFFloat gravity 0
  eventIn  SFFloat set_gravity
  eventIn SFFloat drop
  eventOut MFInt32 isActive
  eventIn  SFBool isBindable
  eventIn SFTime unbind
  eventOut SFInt32 dead
]
{
PROTO Sleeve [
  exposedField SFColor color 0.2 0.2 1
  exposedField SFFloat transparency 0
]
{
Group {
  children [
    Shape {
      appearance Appearance {
        material Material { transparency IS transparency }
        texture ImageTexture {
          url "corv04d.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
         2,3,0,1,-1,
          2,3,0,1,-1,
          2,3,0,1,-1,
        ]
        coord Coordinate {
          point [
				1.000000 6.000000 1.500000,
				1.000000 7.500000 6.500000,
				1.000000 8.000000 6.500000,
				1.000000 8.000000 1.500000,
				-3.500000 8.000000 1.500000,
				-3.500000 6.000000 1.500000,
				-3.500000 8.000000 4.000000,
				-3.500000 6.000000 4.000000,
				-3.500000 8.000000 4.000000,
				-3.500000 6.000000 4.000000,
				-2.500000 8.000000 6.500000,
				-2.500000 7.500000 6.500000
          ]
        }
        coordIndex [
				0, 1, 2, 3, -1,
				6, 4, 5, 7, -1,
				10, 8, 9, 11, -1,
        ]
      }
    }  
    Shape {
      appearance Appearance {
        material Material { transparency IS transparency }
        texture ImageTexture {
          url "corv04c.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          2,3,0,1,-1,
          1,2,3,0,-1,
          0,1,2,3,-1,
          0,1,2,3,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				-1.000000 6.000000 1.500000,
				-1.000000 8.000000 1.500000,
				-1.000000 8.000000 6.500000,
				-1.000000 7.500000 6.500000,
				1.000000 6.000000 1.500000,
				1.000000 8.000000 1.500000,
				3.500000 8.000000 1.500000,
				3.500000 6.000000 1.500000,
				3.500000 8.000000 1.500000,
				3.500000 6.000000 1.500000,
				3.500000 8.000000 4.000000,
				3.500000 6.000000 4.000000,
				3.500000 8.000000 4.000000,
				3.500000 6.000000 4.000000,
				2.500000 8.000000 6.500000,
				2.500000 7.500000 6.500000,
				-1.000000 6.000000 1.500000,
				-1.000000 8.000000 1.500000,
				-3.500000 8.000000 1.500000,
				-3.500000 6.000000 1.500000,
          ]
        }
        coordIndex [
				0, 1, 2, 3, -1,
				5, 6, 7, 4, -1,
				10, 11, 9, 8, -1,
				14, 15, 13, 12, -1,
				18, 17, 16, 19, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {
          diffuseColor IS color
          transparency IS transparency
        }
        texture ImageTexture {
          url "32xlogos.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
          2,3,0,1,-1,
          1,2,3,0,-1,
          2,3,0,1,-1,
        ]
        coord Coordinate {
          point [
				1.000000 8.000000 1.500000,
				3.500000 8.000000 1.500000,
				1.000000 8.000000 4.000000,
				3.500000 8.000000 4.000000,
				1.000000 8.000000 6.500000,
				1.000000 8.000000 4.000000,
				3.500000 8.000000 4.000000,
				2.500000 8.000000 6.500000,
				-1.000000 8.000000 1.500000,
				-3.500000 8.000000 1.500000,
				-3.500000 8.000000 4.000000,
				-1.000000 8.000000 4.000000,
				-1.000000 8.000000 6.500000,
				-3.500000 8.000000 4.000000,
				-1.000000 8.000000 4.000000,
				-2.500000 8.000000 6.500000,
          ]
        }
        coordIndex [
				0, 2, 3, 1, -1,
				5, 4, 7, 6, -1,
				9, 10, 11, 8, -1,
				13, 15, 12, 14, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "metal3c.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				1.000000 7.500000 6.500000,
				1.000000 8.000000 6.500000,
				2.500000 8.000000 6.500000,
				2.500000 7.500000 6.500000,
          ]
        }
        coordIndex [
				0, 3, 2, 1, -1,
        ]
      }
    }
    Shape {
      appearance Appearance {
        material Material { transparency IS transparency }
        texture ImageTexture {
          url "metal3c.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				-1.000000 8.000000 6.500000,
				-1.000000 7.500000 6.500000,
				-2.500000 8.000000 6.500000,
				-2.500000 7.500000 6.500000
          ]
        }
        coordIndex [
				3, 1, 0, 2, -1
        ]
      }
    }
  ]
}
}
PROTO Turret [
  exposedField SFColor color 0.2 0.2 1
  exposedField SFFloat transparency 0
]
{
Group {
  children [
    Shape {
      appearance Appearance {
        material Material { transparency IS transparency }
        texture ImageTexture {
          url "corv04c.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          2,1,0,3,-1,
          2,1,0,3,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				1.500000 7.000000 9.000000,  #10
				2.500000 7.000000 6.500000,  #11
				1.500000 6.000000 9.000000,  #12
				2.500000 6.000000 6.500000   #13
				-1.500000 6.000000 9.000000, #8
				-1.500000 7.000000 9.000000, #9
				1.000000 6.000000 2.500000,  #0
				-1.000000 6.000000 2.500000, #1
				-1.000000 7.000000 2.500000, #2
				1.000000 7.000000 2.500000,  #3
          ]
        }
        coordIndex [
				3, 1, 0, 2, -1,
				0, 5, 4, 2, -1,
				6, 7, 8, 9, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "corv04d.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          2,1,0,3,-1,
        ]
        coord Coordinate {
          point [
				-2.500000 7.000000 6.500000, #6
				-2.500000 6.000000 6.500000, #7
				-1.500000 6.000000 9.000000, #8
				-1.500000 7.000000 9.000000, #9
          ]
        }
        coordIndex [
				0, 1, 2, 3, -1,
        ]
      }
    }  
    Shape {
      appearance Appearance {
        material Material {
          transparency IS transparency
          diffuseColor IS color
        }
        texture ImageTexture {
          url "32xlogos.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          3,2,1,0,-1,
        ]
        coord Coordinate {
          point [
				-2.500000 7.000000 6.500000, #6
				-1.500000 7.000000 9.000000, #9
				1.500000 7.000000 9.000000,  #10
				2.500000 7.000000 6.500000,  #11
          ]
        }
        coordIndex [
				0,1,2,3, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material { transparency IS transparency }
        texture ImageTexture {
          url "corv04a.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          0,1,2,3,-1,
        ]
        coord Coordinate {
          point [
				-1.000000 7.000000 2.500000, #2
				1.000000 7.000000 2.500000,  #3
				-1.000000 7.000000 6.500000, #4
				1.000000 7.000000 6.500000,  #5
          ]
        }
        coordIndex [
				0,2,3,1, -1,
        ]
      }
    }
  ]
}
}
PROTO Barrel1 [
  exposedField SFColor color 0.2 0.2 0.2
  exposedField SFFloat transparency 0
]
{
Transform { 
  translation 2.2 6.9 -2
  rotation 1 0 0 1.570796
  scale 0.55 1 0.55
  children [ 
    Shape {
      appearance Appearance {
        material Material {
          transparency IS transparency
          emissiveColor 0.2 0.2 0.2
          specularColor 0.4 0.4 0.4
          shininess 0.06
          diffuseColor IS color 
        }
      }
      geometry Extrusion {
        beginCap FALSE
        crossSection [1 0,.9239 .3827,.7071 .7071,.3827 .9238,
          0 1,-.3827 .9239,-.7071 .7071,-.9238 .3827,
          -1 0,-.9239  -.3827,-.7071 -.7071,-.3827 -.9238,
          0 -1,.3827 -.9239,.7071 -.7071,.9238 -.3827,1 0
        ]
        creaseAngle 3.1415
        spine [0 -3.5 0,0 3.5 0]
        solid FALSE
      }
    }
  ]
}
}
PROTO Barrel2 [
  exposedField SFColor color 0.2 0.2 0.2
  exposedField SFFloat transparency 0
]
{
Transform { 
  rotation 1 0 0 1.570796
  translation -2.2 6.9 -2
  scale 0.55 1 0.55
  children [  
    Shape {
      appearance Appearance {
        material Material {
          transparency IS transparency
          emissiveColor 0.2 0.2 0.2
          specularColor 0.4 0.4 0.4
          shininess 0.06
          diffuseColor IS color
        }
      }
      geometry Extrusion {
        beginCap FALSE
        crossSection [1 0,.9239 .3827,.7071 .7071,.3827 .9238,
          0 1,-.3827 .9239,-.7071 .7071,-.9238 .3827,
          -1 0,-.9239  -.3827,-.7071 -.7071,-.3827 -.9238,
          0 -1,.3827 -.9239,.7071 -.7071,.9238 -.3827,1 0
        ]
        creaseAngle 3.1415
        scale [1 1,1 1,]
        spine [0 -3.5 0,0 3.5 0,]
        solid FALSE
      }
    }
  ]
}
}
PROTO Bulldog [
  exposedField SFFloat transparency 0
]
{
Group {
  children [
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          2,1,0,3,-1,
        ]
        coord Coordinate {
          point [
				-8.850000 0.000000 -9.461359,
				8.850000 0.000000 -9.461359,
				8.850000 0.000000 9.738629,
				-8.850000 0.000000 9.738629,
          ]
        }
        coordIndex [
				0, 1, 2, 3, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "tredside1.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				7.750000 0.000000 6.338635,
				7.750000 0.000000 -3.561359,
				7.750000 3.500000 -3.561359,
				7.750000 3.500000 6.338635,
          ]
        }
        coordIndex [
				0,1,2,3,-1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "camod01.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				7.750000 3.500000 -3.561359,   
				7.750000 3.500000 6.338635,
				4.750000 3.500000 -3.561359,
				4.750000 3.500000 6.338635,
				4.750000 3.500000 -6.861359,
				5.750000 3.500000 -6.861359,    
				5.750000 3.500000 9.138636,    
				4.750000 3.500000 9.138636,
				-8.750000 3.500000 6.338635,
				-8.750000 3.500000 -3.561359,
				-5.750000 3.500000 6.338635,
				-5.750000 3.500000 -3.561359, 
				-5.750000 3.500000 -6.861359,   
				-6.750000 3.500000 -6.861359,
				-5.750000 3.500000 9.138636,     
				-6.750000 3.500000 9.138636,
          ]
        }
        coordIndex [
				1, 0, 2, 3, -1,
				4, 2, 0, 5, -1,
				6, 1, 3, 7, -1,
				10,11,9,8, -1,    
				11, 12, 13, 9, -1,
				14, 10, 8, 15, -1,    
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "juncam03.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				1.750000 2.000000 -8.861359,
				1.750000 4.000000 -7.911359,   
				3.949988 2.000000 -7.661359,
				4.072998 4.400000 -6.459363,
				-5.750000 2.000000 9.638636,   
				-5.750000 6.000000 7.638629,
				4.750000 6.000000 7.638629,
				4.750000 2.000000 9.638636
				7.750000 0.000000 -3.561359, 
				4.750000 0.000000 -3.561359,
				4.750000 3.400000 -6.861359,
				5.750000 3.400000 -6.861359,     #11
				7.750000 0.000000 6.338635,
				5.750000 3.400000 9.138636,
				4.750000 3.400000 9.138636,
				4.750000 0.000000 6.338635,
				-8.750000 0.000000 -3.561359,   
				-6.750000 3.400000 -6.861359,
				-5.750000 3.400000 -6.861359,    #18 = 11
				-5.750000 0.000000 -3.561359,
				-8.750000 0.000000 6.338635,
				-6.750000 3.400000 9.138636,
				-5.750000 0.000000 6.338635,
				-5.750000 3.400000 9.138636,      #23 = 13
				-2.750000 2.000000 -8.861359,
				-5.072998 4.400000 -6.459363,
				-4.949994 2.000000 -7.661359,
				-2.750000 4.000000 -7.911359,
          ]
        }
        coordIndex [
				0, 1, 3, 2, -1,   
				6, 5, 4, 7, -1,
				8, 9, 10, 11, -1,
				13, 14, 15, 12, -1,
				16,17,18,19, -1,
				21, 20, 22, 23, -1,
				24, 26, 25, 27, -1,
        ]
      }
    }  
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "juncam02.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				7.750000 0.000000 -3.561359,
				7.750000 3.500000 -3.561359,
				5.750000 3.400000 -6.861359,
				5.750000 3.500000 -6.861359,
				7.750000 0.000000 6.338635,
				7.750000 3.500000 6.338635,
				5.750000 3.400000 9.138636,
				5.750000 3.500000 9.138636,
				4.750000 2.000000 -0.861359,
				3.949988 2.000000 -7.661359,
				4.072998 4.400000 -6.459363,
				4.750000 6.000000 -0.861359,
				4.750000 2.000000 -0.861359,
				4.750000 6.000000 -0.861359,
				4.750000 6.000000 7.638629,
				4.750000 2.000000 9.638636
          ]
        }
        coordIndex [
				1, 0, 2, 3, -1,
				7, 6, 4, 5, -1,
				8, 9, 10, 11, -1,
				15, 12, 13, 14, -1      #30
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "tredside2.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				-8.750000 0.000000 -3.561359,   #20
				-8.750000 0.000000 6.338635,
				-8.750000 3.500000 6.338635,
				-8.750000 3.500000 -3.561359,
          ]
        }
        coordIndex [
				0,1,2,3, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "juncam04.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				-8.750000 0.000000 -3.561359,   #20
				-8.750000 3.500000 -3.561359,
				-6.750000 3.400000 -6.861359,
				-6.750000 3.500000 -6.861359,   #30
				-8.750000 0.000000 6.338635,
				-8.750000 3.500000 6.338635,
				-6.750000 3.400000 9.138636,
				-6.750000 3.500000 9.138636,    #35
				-5.750000 2.000000 -0.861359,    #40
				-5.750000 6.000000 -0.861359,
				-5.072998 4.400000 -6.459363,
				-4.949994 2.000000 -7.661359,
				-5.750000 2.000000 -0.861359,    #40
				-5.750000 6.000000 -0.861359,
				-5.750000 2.000000 9.638636,   #55
				-5.750000 6.000000 7.638629,
          ]
        }
        coordIndex [
				1, 3, 2, 0, -1,
				7, 5, 4, 6, -1,
				8, 9, 10, 11, -1,
				13, 12, 14, 15, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "camoe02.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				1.750000 6.000000 -6.861359,
				1.750000 2.000000 -8.861359,
				-2.750000 2.000000 -8.861359,
				-2.750000 6.000000 -6.861359,
          ]
        }
        coordIndex [
				0,1,2,3, -1,
        ]
      }
    }  
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "juncam01.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
          1,2,3,0,-1,
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				-5.750000 6.000000 -0.861359,
				-5.072998 4.400000 -6.459363,
				-2.750000 4.000000 -7.911359,
				-2.750000 6.000000 -0.861359,   #45
				1.750000 6.000000 -0.861359,
				1.750000 4.000000 -7.911359,   #50
				4.072998 4.400000 -6.459363,
				4.750000 6.000000 -0.861359,
				-5.750000 6.000000 -0.861359,
				4.750000 6.000000 -0.861359,
				-5.750000 6.000000 7.638629,
				4.750000 6.000000 7.638629,
          ]
        }
        coordIndex [
				3, 2, 1, 0, -1,    #20
				7, 6, 5, 4, -1,
				10, 11, 9, 8, -1,
        ]
      }
    }    
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "camoc04.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				-2.750000 6.000000 -6.861359,
				-2.750000 6.000000 -0.861359,   #45
				-2.750000 4.000000 -7.861359,
				-2.750000 4.000000 -0.861359,
          ]
        }
        coordIndex [
				0, 2, 3, 1, -1,
        ]
      }
    }   
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "camoc03.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				1.750000 6.000000 -6.861359,
				1.750000 6.000000 -0.861359,
				1.750000 4.000000 -0.861359,
				1.750000 4.000000 -7.911359,   #50
          ]
        }
        coordIndex [
				1, 2, 3, 0, -1,
        ]
      }
    }  
    Shape {
      appearance Appearance {
        material Material {transparency IS transparency }
        texture ImageTexture {
          url "camoe01.jpg"
        }
      }
      geometry IndexedFaceSet {
        texCoord TextureCoordinate {
          point [
            0 0, 
            0 1,
            1 1,
            1 0,
          ]
        }
        texCoordIndex [
          1,2,3,0,-1,
        ]
        coord Coordinate {
          point [
				1.750000 6.000000 -6.861359,
				-2.750000 6.000000 -6.861359,
				-2.750000 6.000000 -0.861359,   #45
				1.750000 6.000000 -0.861359,
          ]
        }
        coordIndex [
				1, 2, 3, 0, -1,
        ]
      }
    }
  ]
}
}

PROTO DeadTank [
  exposedField SFFloat transparency 1
]
  {
    Group {
      children [
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "tredside2.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [
							              7.75 0 6.34,
							              7.75 0 -3.56,
							              7.75 3.5 -3.56,
							              7.75 3.5 6.34,#75
							              -8.75 0 -3.56,
							              -8.75 0 6.34,
							              -8.75 3.5 6.34,#90
							              -8.75 3.5 -3.56,


              ]
            }
            coordIndex [
						              0, 1, 2, 3, -1,
						              4, 5, 6, 7, -1,      
            ]
          }
        }   
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "wreck003c.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [
							              -0.358124 7 2.4996,
							              1.43945 7 3.37634,
							              -2.11161 7 6.09478,
							              -0.314014 7 6.97152,

							              -3.65693 7 8.12257,
							              -3.4598 7 5.43721,
							              -0.960553 7 9.43769,
							              1.03416 7 7.62908,#65



              ]
            }
            coordIndex [       
						              1,0,2,3, -1,
						              6,7,5,4, -1, 
            ]
          }
        }  
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "wreck003b.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [
							              -5.75 2 9.64,
							              -5.75 6 7.64,#125
							              4.75 6 7.64,
							              4.75 2 9.64

							              -2.75 2 -8.86,
							              -2.75 6 -6.86,#105
							              1.75 6 -6.86,
							              1.75 2 -8.86,
              ]
            }
            coordIndex [
       						              3, 2, 1, 0, -1,  
						              4,5,6,7, -1,
            ]
          }
        }  
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "wreck007a.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [
							              -5.073 4.4 -6.45799,
							              -5.75 6 -0.859998,
							              -2.75 4 -7.90999,
							              -2.75 6 -0.859998,

              ]
            }
            coordIndex [      
						              3, 2, 0, 1, -1,
            ]
          }
        }  
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "noise6c.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [

							              4.37322 6.90673 -0.813824,
							              4.23058 7.63757 -0.521368,
							              4.94962 7.63757 -0.170673,
							              5.09226 6.90673 -0.463122,
							              5.58607 9.65962 -1.4756,#20
							              5.86243 9.16709 -2.04221,
							              5.14339 9.16709 -2.3929,
							              4.86703 9.65962 -1.82629,

							              7.75 0 6.34,
							              7.75 3.5 6.34,#75
							              5.75 3.4 9.14,
							              5.75 3.5 9.14,

							              -8.75 0 -3.56,
							              -8.75 3.5 -3.56,
							              -6.75 3.4 -6.86,
							              -6.75 3.5 -6.86,

							              7.75 0 -3.56,
							              7.75 3.5 -3.56,
							              5.75 3.4 -6.86,
							              5.75 3.5 -6.86,


							              -8.75 0 6.34,
							              -8.75 3.5 6.34,#90
							              -6.75 3.4 9.14, 
							              -6.75 3.5 9.14,

							              7.75 0 -3.56,
							              7.75 3.5 -3.56, 
							              5.75 3.4 -6.86,
							              5.75 3.5 -6.86,

              ]
            }
            coordIndex [   
						              0, 1, 2, 3, -1,#10
						              3, 2, 4, 5, -1,     
						              0, 6, 7, 1, -1,
						              6, 0, 3, 5, -1,
						              9, 11, 10, 8, -1,#50
						              13, 15, 14, 12, -1,#55         
						              16, 18, 19, 17, -1,
						              20, 22, 23, 21, -1,          
						              24, 26, 27, 25, -1,


            ]
          }
        }
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "wreck005b.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [	 
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [			
							              7.75 3.5 -3.56,
							              7.75 3.5 6.34,#75
							              4.75 3.5 -3.56,
							              4.75 3.5 6.34,
	 
							              7.75 3.5 -3.56,	
							              4.75 3.5 -3.56,	
							              5.75 3.5 -6.86,
							              4.75 3.5 -6.86,							 

							              7.75 3.5 6.34,#75	
							              4.75 3.5 6.34,	
							              4.75 3.5 9.14,
							              5.75 3.5 9.14,

							              -8.75 3.5 6.34,#90
							              -8.75 3.5 -3.56,
							              -5.75 3.5 -3.56,
							              -5.75 3.5 6.34,

							              -8.75 3.5 -3.56,
							              -5.75 3.5 -3.56,
							              -5.75 3.5 -6.86,
							              -6.75 3.5 -6.86,

							              -8.75 3.5 6.34,#90 
							              -5.75 3.5 6.34,	
							              -6.75 3.5 9.14,
							              -5.75 3.5 9.14,
              ]
            }
            coordIndex [    						 
						              1, 0, 2, 3, -1,
						              4, 6, 7, 5, -1, 
						              9, 10, 11, 8, -1,	         
						              14, 13, 12, 15, -1,
						              16, 17, 18, 19, -1,       
						              22, 23, 21, 20, -1,
            ]
          }
        }  
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "wreck007c.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [	 
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [				
							              -5.073 4.4 -6.45799,
							              -4.94999 2 -7.65999,
							              -5.75 2 -0.859998,#110
							              -5.75 6 -0.859998,	
					
							              -2.75 6 -6.86,#105
							              1.75 6 -6.86,		
							              -2.75 6 -0.859998,	 
							              1.75 6 -0.859998,	
						
							              4.75 2 -0.859998,
							              3.94999 2 -7.65999,#120
							              4.073 4.4 -6.45799,
							              4.75 6 -0.859998,	

							              1.75 6 -0.859998,
							              1.75 4 -7.90999,
							              4.073 4.4 -6.45799,
							              4.75 6 -0.859998,	

							              -5.75 2 -0.859998,#110
							              -5.75 6 -0.859998,
							              -5.75 2 9.64,
							              -5.75 6 7.64,  

							              -5.75 6 -0.859998,
							              4.75 6 -0.859998,
							              -5.75 6 7.64,
							              4.75 6 7.64,#125

							              4.75 2 -0.859998,
							              4.75 6 -0.859998,
							              4.75 6 7.64,#125
							              4.75 2 9.64, 
              ]
            }
            coordIndex [    	
						              0, 1, 2, 3, -1,#60	
						              4, 6, 7, 5, -1,#65	
						              8, 9, 10, 11, -1,  
						              13, 12, 15, 14, -1,   
						              16, 18, 19, 17, -1,	
						              21, 20, 22, 23, -1,#70     
						              25, 26, 27, 24, -1, 			  
            ]
          }
        }
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "wreck001b.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [	 
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [	
							              1.87783 8 2.47755,#35
							              4.12482 8 3.57347,
							              0.781903 8 4.72453,
							              3.02889 8 5.82045,

							              -0.314014 8 6.97152,
							              0.781903 8 4.72453,
							              3.02889 8 5.82045,
						      	          1.03416 8 7.62908,#45

							              0.080243 8 1.6008,
							              -2.16674 8 0.504877,
							              -1.01568 8 3.84778,
							              -3.26267 8 2.75186,#50

							              -2.11161 8 6.09478,
							              -1.01568 8 3.84778,
							              -3.26267 8 2.75186,#50
							              -3.4598 8 5.43721,

							              -2.75 2 -8.86,
							              -5.073 4.4 -6.45799,
							              -4.94999 2 -7.65999,
							              -2.75 4 -7.90999,

							              1.75 2 -8.86,
							              1.75 4 -7.90999,
							              3.94999 2 -7.65999,#120
							              4.073 4.4 -6.45799,

              ]
            }
            coordIndex [    
						              0, 2, 3, 1, -1,#25       
						              5, 4, 7, 6, -1,	
						              10, 8, 9, 11, -1, 
						              12, 13, 14, 15, -1,
						              16, 18, 17, 19, -1,      
						              20, 21, 23, 22, -1,		  
            ]
          }
        }
        Shape {
          appearance Appearance {
           material Material { transparency IS transparency 
             }
            texture ImageTexture {
              url "noise6a.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [	 
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [	-1.35782 6.5 0.899414,         #0
							              -1.35782 7.3 0.899414,
							              0.631775 7.3 -3.17988,
							              0.631775 6.5 -3.17988,
							              0.709589 6.5 -3.79123,
							              0.709589 7.3 -3.79123,#5
							              0.202148 7.3 -5.61657,
							              0.202148 6.5 -5.61657,
							              1.35081 7.3 -2.82919,
							              -0.638788 7.3 1.25011,
							              0.97489 7.3 -5.82363,#10
							              1.50363 7.3 -3.69373,
							              -0.638788 6.5 1.25011,
							              1.35081 6.5 -2.82919,
							              1.50363 6.5 -3.69373,
							              0.97489 6.5 -5.82363,#15
							              4.37322 6.90673 -0.813824,
							              4.23058 7.63757 -0.521368,
							              4.94962 7.63757 -0.170673,
							              5.09226 6.90673 -0.463122,
							              5.58607 9.65962 -1.4756,#20
							              5.86243 9.16709 -2.04221,
							              5.14339 9.16709 -2.3929,
							              4.86703 9.65962 -1.82629,
							              3.31589 7.3 3.17894,
							              3.31589 6.5 3.17894,#25
							              4.69178 6.5 0.357953,
							              4.69178 7.3 0.357953,
							              3.97275 7.3 0.007257,
							              2.59686 7.3 2.82825,
							              2.59686 6.5 2.82825,#30
							              3.97275 6.5 0.007257,

							              4.37322 6.90673 -0.813824,

              ]
            }
            coordIndex [    0, 1, 2, 3, -1,             
						              4, 5, 6, 7, -1,
						              3, 2, 5, 4, -1,
						              8, 2, 1, 9, -1,
						              10, 6, 5, 11, -1,#5
						              11, 5, 2, 8, -1,        
						              9, 12, 13, 8, -1,
						              11, 14, 15, 10, -1,
						              8, 13, 14, 11, -1,	
                        
						              24, 25, 26, 27, -1,
						              18, 19, 21, 20, -1,#15
						              27, 26, 19, 18, -1,      
						              27, 28, 29, 24, -1,
						              20, 23, 17, 18, -1,
						              18, 17, 28, 27, -1,
						              30, 29, 28, 31, -1,#20
						              31, 28, 17, 16, -1,     
						              16, 17, 23, 22, -1, 
            ]
          }
        }
        Shape {
          appearance Appearance {
            material Material {
              transparency IS transparency
            }
            texture ImageTexture {
              url "corsea3c.jpg"
            }
          }
          geometry IndexedFaceSet {
            texCoord TextureCoordinate {
              point [
                0 0, 
                0 1,
                1 1,
                1 0,
              ]
            }
            texCoordIndex [	 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1, 
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
              1,2,3,0,-1,
            ]
            coord Coordinate {
              point [
							              1.87783 6 2.47755,
							              -0.314014 7.5 6.97152,
							              -0.314014 8 6.97152,
							              1.87783 8 2.47755,#35
							              0.080243 6 1.6008,
							              0.080243 8 1.6008,
							              -2.11161 8 6.09478,
							              -2.11161 7.5 6.09478,
							              4.12482 6 3.57347,#40
							              4.12482 8 3.57347,
							              0.781903 8 4.72453,
							              3.02889 8 5.82045,
							              3.02889 6 5.82045,
						      	              1.03416 8 7.62908,#45
							              1.03416 7.5 7.62908,
							              -2.16674 6 0.504877,
							              -2.16674 8 0.504877,
							              -1.01568 8 3.84778,
							              -3.26267 8 2.75186,#50
							              -3.26267 6 2.75186,
							              -3.4598 8 5.43721,
							              -3.4598 7.5 5.43721,
							              1.43945 6 3.37634,
							              -0.358124 6 2.4996,#55
							              -0.358124 7 2.4996,
							              1.43945 7 3.37634,
							              -2.11161 7 6.09478,
							              -0.314014 7 6.97152,
							              -3.4598 6 5.43721,#60
							              -3.65693 6 8.12257,
							              -3.65693 7 8.12257,
							              -3.4598 7 5.43721,
							              -0.960553 7 9.43769,
							              1.03416 7 7.62908,#65
							              -0.960553 6 9.43769,
							              1.03416 6 7.62908,

							              7.75 0 6.34,
							              7.75 0 -3.56,
							              7.75 3.5 -3.56,
							              7.75 3.5 6.34,#75
							              4.75 3.5 -3.56,
							              4.75 3.5 6.34,
							              5.75 3.4 -6.86,
							              4.75 0 -3.56,
							              4.75 3.4 -6.86,#80
							              5.75 3.5 -6.86,
							              4.75 3.5 -6.86,
							              5.75 3.4 9.14,
							              4.75 3.4 9.14,
							              4.75 0 6.34,#85
							              4.75 3.5 9.14,
							              5.75 3.5 9.14,
							              -8.75 0 -3.56,
							              -8.75 0 6.34,
							              -8.75 3.5 6.34,#90
							              -8.75 3.5 -3.56,
							              -5.75 3.5 -3.56,
							              -5.75 3.5 6.34,
							              -6.75 3.4 -6.86,
							              -5.75 3.4 -6.86,#95
							              -5.75 0 -3.56,
							              -5.75 3.5 -6.86,
							              -6.75 3.5 -6.86,
							              -6.75 3.4 9.14,
							              -5.75 0 6.34,#100
							              -5.75 3.4 9.14,
							              -6.75 3.5 9.14,
							              -5.75 3.5 9.14,
							              -2.75 2 -8.86,
							              -2.75 6 -6.86,#105
							              1.75 6 -6.86,
							              1.75 6 -6.86,
							              1.75 2 -8.86,
							              -5.073 4.4 -6.45799,
							              -4.94999 2 -7.65999,
							              -5.75 2 -0.859998,#110
							              -5.75 6 -0.859998,
							              -2.75 4 -7.90999,
							              -2.75 6 -0.859998,
							              -2.75 4 -7.86,
							              -2.75 4 -0.859998,#115
							              1.75 6 -0.859998,
							              1.75 4 -0.859998,
							              1.75 4 -7.90999,
              ]
            }
            coordIndex [        
						              4, 5, 6, 7, -1,
						              0, 1, 2, 3, -1,
						              8, 0, 3, 9, -1,
						              11, 12, 8, 9, -1,
						              13, 14, 12, 11, -1,
						              15, 16, 5, 4, -1,#30      
						              18, 16, 15, 19, -1,
						              20, 18, 19, 21, -1,
						              22, 23, 24, 25, -1, 
						              28, 29, 30, 31, -1,
						              32, 30, 29, 34, -1,#40 
						              35, 33, 32, 34, -1,   

						              42, 37, 43, 44, -1,#45
						              47, 48, 49, 36, -1,
						              52, 58, 59, 60, -1,
						              63, 53, 64, 65, -1,  
						              69, 79, 80, 78, -1,
                                      81,82,83,71,-1,
            ]
          }
        }
      ]
    }
}
DEF tank Transform {
  translation IS location
  scale IS scale
  rotation IS orientation
  children [
    DEF NI NavigationInfo {
      type ["EXAMINE" "ANY"]
      headlight FALSE
    }
    DEF dt DeadTank {
    }
    DEF aliveGroup Switch {
      choice [ 
        Group {
          children [
            DEF body Bulldog {}
            DEF turret Transform { 
              rotation 0 1 0 1.5 
              center 0 7 4
              children [
                DEF tv Viewpoint {
                  position 0 9 10        
                }
                DEF tc Turret {
                  color IS color 
                }
                DEF sleeve Transform {
                  center 0 7 4
                  children [
                    Sound {
                      minFront 10000
                      minBack 10000
                      maxFront 1000000
                      maxBack 1000000
                      source DEF boom AudioClip {
                        url "cannon1.wav"
                      }
                    }
                    DEF sc Sleeve {
                      color IS color 
                    }
                    DEF barrel1 Transform {
                      children [       
                        DEF b1 Barrel1 {}
                        DEF flare1 Switch {
                          choice [

Transform {
  translation 4.4 0 0
  children [
Collision {
    collide FALSE
    children [
	Group {
	    children [
		
		DEF def_object Group {
		    children [
			Shape {
			    appearance
				Appearance {
				    material
					Material {
					    					    diffuseColor	1 0 0
					}
				}
			    geometry
				IndexedFaceSet {
				    coord
					Coordinate {
					    point	[ -2.78558 6.88618 -7.04267,
							      -2.24091 6.88618 -5.64131,
							      -1.70497 6.88618 -7.03182,
							      -2.24523 6.88618 -9.87727,
							      -2.24397 6.23161 -7.12665,
							      0 0 0,
							      -2.24408 7.46371 -7.08539 ]
					}
				    solid	FALSE
				    creaseAngle	0.5
				    coordIndex	[ 0, 1, 2, -1, 0, 2, 3, -1,
						      1, 4, 3, -1, 3, 6, 1, -1 ]
				}
			}
		    ]
		}
	    ]
	}
    ]
}

  ]
}
                          ]
                        }
                      ]
                    }
                    DEF barrel2 Transform {
                      children [
                        DEF b2 Barrel2 {}
                        DEF flare2 Switch {
                          choice [

Collision {
    collide FALSE
    children [
	Group {
	    children [
		
		DEF def_object Group {
		    children [
			Shape {
			    appearance
				Appearance {
				    material
					Material {
					    					    diffuseColor	1 0 0
					}
				}
			    geometry
				IndexedFaceSet {
				    coord
					Coordinate {
					    point	[ -2.78558 6.88618 -7.04267,
							      -2.24091 6.88618 -5.64131,
							      -1.70497 6.88618 -7.03182,
							      -2.24523 6.88618 -9.87727,
							      -2.24397 6.23161 -7.12665,
							      0 0 0,
							      -2.24408 7.46371 -7.08539 ]
					}
				    solid	FALSE
				    creaseAngle	0.5
				    coordIndex	[ 0, 1, 2, -1, 0, 2, 3, -1,
						      1, 4, 3, -1, 3, 6, 1, -1 ]
				}
			}
		    ]
		}
	    ]
	}
    ]
}

                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
DEF dieTimer TimeSensor {
}
DEF dropTimer TimeSensor {
  cycleInterval 360
}
DEF recoilTimer TimeSensor {
  cycleInterval 2
}
DEF tankScript Script {
	eventOut SFInt32 dead IS dead
  eventIn SFTime unbind IS unbind
  field SFNode NI USE NI
  field SFNode tv USE tv
  eventIn SFBool isBindable IS isBindable
  field SFBool bindable TRUE
  field SFInt32 decPlaces IS decPlaces
  field SFNode dropTimer USE dropTimer
  field SFFloat gravity IS gravity
  eventIn  SFFloat set_gravity IS set_gravity
  eventIn SFFloat drop IS drop
  field SFFloat stopHeight 0
  field SFFloat startHeight 0
  eventIn SFFloat dropFrac 
  eventOut MFInt32 isActive IS isActive

  directOutput TRUE
  field SFFloat velocity 50
  field SFBool  barrel TRUE
  field MFVec3f  barrelp1  [2.2 6.9 1.5, 2.2 6.9 -5.5]
  field MFVec3f  barrelp2  [-2.2 6.9 1.5, -2.2 6.9 -5.5] 
  field SFFloat  hp IS hp
  field	SFFloat	 defhp IS defhp
  field MFRotation  explosions []
  field SFInt32 tankID IS tankID
  field SFColor color IS color
  field SFString name IS name
  field SFFloat expr IS expr
  field SFFloat expt IS expt
  field SFFloat maxDam IS maxDam
  field	SFBool exists FALSE

  eventIn  SFTime     get_angles IS get_angles
  eventOut MFRotation calibrate_angles IS calibrate_angles
  eventIn  SFTime     shot_set IS shot_set
  eventIn  MFVec3f    expLocation IS expLocation
  eventIn  SFVec2f    expRadius IS expRadius
  eventIn  MFRotation set_angles IS set_angles
  eventOut MFVec3f    explosionOut IS explosionOut
  eventOut MFVec3f    set_fire_order IS set_fire_order
  eventOut MFFloat    health IS health
  eventOut SFString   nameOut IS nameOut
  eventIn  SFString set_name IS set_name
  eventIn  SFColor  set_color IS set_color
  eventIn  SFBool   exist IS exist

  eventIn  SFFloat     recoilFrac
  eventIn  SFFloat     dieFrac

  field SFNode b1 USE b1
  field SFNode b2 USE b2
  field SFNode body USE body
  field SFNode tank USE tank
  field SFNode turret USE turret
  field SFNode sleeve USE sleeve
  field SFNode barrel1 USE barrel1 
  field SFNode barrel2 USE barrel2
  field SFNode flare1 USE flare1
  field SFNode flare2 USE flare2
  field SFNode recoilTimer USE recoilTimer
  field SFNode dieTimer USE dieTimer
  field SFNode boom USE boom
  field SFNode tc USE tc
  field SFNode sc USE sc
  field SFBool active FALSE 
  field SFNode dt USE dt
  field SFNode aliveGroup USE aliveGroup
  url ["javascript:
    function initialize(){
      decPlaces = Math.pow(10,decPlaces);
      dt.transparency = 1;
      dieTimer.cycleInterval = expt ; 
                                                                                                   			  
      exist(FALSE,0);
   }
    function set_gravity(sffloat,tm){
      gravity = sffloat	;
    }
    function isBindable(sfbool,tm){
      bindable = sfbool	;
    }
    function dropFrac(sffloat,tm){
      animtm = sffloat * 360 ;
      tank.translation[1] = startHeight - (1/2 * gravity * (animtm* animtm)) ;
      if(tank.translation[1] <= stopHeight){
        tank.translation[1] = stopHeight;
        dropTimer.stopTime = tm;
        isActive = new MFInt32(tankID,0) ;
        value = (startHeight-stopHeight)/gravity < 0 ? 0 : (startHeight-stopHeight)/gravity;
        hp -= 10*gravity*(Math.sqrt(value))	;
        if(exists){
          checkHealth(tm);
        }
      }
    }
    function drop(sffloat,tm){
      if(gravity > 0){
        dropTimer.startTime = tm ;
        startHeight = tank.translation[1]  ;
        stopHeight = tank.translation[1] - sffloat	;
        isActive = new MFInt32(tankID,1);
      }
    }
    function dieFrac(frac,tm){
      dt.transparency = 1 - frac ;
      body.transparency = frac ;
      b1.transparency = frac  ;
      b2.transparency = frac  ;
      tc.transparency = frac  ;
      sc.transparency = frac ;
      if(frac == 1){
        exist(FALSE,0);
        dt.transparency = 0	;
        aliveGroup.whichChoice = -1;
      }
    }
    function exist(bool, tm){								   
  	  dt.transparency = 1	;
      exists = bool	;
      aliveGroup.whichChoice = -1;							
      if(bool == TRUE){			
		    health = new MFFloat(tankID,defhp);				  
        aliveGroup.whichChoice = 0;
        hp = defhp;			
        body.transparency = 0;
        b1.transparency = 0	;
        b2.transparency = 0	;
        tc.transparency = 0	;
        sc.transparency = 0	;		   
        empty = new SFRotation(0,0,0,0);
        set_angles(new MFRotation(empty,empty,new SFRotation(50,0,0,0))) ;
      }
    }
    function expLocation(mfvec3f,tm){
      if(exists){
        xd = mfvec3f[0][0] - tank.translation[0] ;
        yd = mfvec3f[0][1] - tank.translation[1];
        zd = mfvec3f[0][2] - tank.translation[2];
        dft = Math.sqrt(xd*xd + yd*yd + zd*zd);
        explosions[mfvec3f[1][0]][0] = dft	  ;
        explosions[mfvec3f[1][0]][1] = mfvec3f[1][1] ;
        explosions[mfvec3f[1][0]][2] = dft;
        explosions[mfvec3f[1][0]][3] = mfvec3f[1][2];
      }
    }
    function set_name(string,tm){
      name = string;
    }
    function set_color(sfcolor,tm){
      color = sfcolor ;
      tc.color = color;
      sc.color = color ;
    }
    function expRadius(sfvec2f,tm){
      if(exists){
        if(explosions[sfvec2f[1]][0] < sfvec2f[0]){
          tr = sfvec2f[0] ;
          r = explosions[sfvec2f[1]][2]	 ;
          hp -= (tr-r)/explosions[sfvec2f[1]][1]*explosions[sfvec2f[1]][3] ;
          checkHealth(tm);
          explosions[sfvec2f[1]][2] = sfvec2f[0] ;
        }
      }
    }
    function checkHealth(tm){
      if(hp <= 0){
        explosionOut[0] = tank.translation;
        explosionOut[1][0] = expr; 
        explosionOut[1][1] = expt ;
        explosionOut[1][2] = maxDam	;
        explosionOut[2][0] = 1 ;
        explosionOut[3] = new SFVec3f(color[0],color[1],color[2]);
        dead = tankID ;
        dieTimer.startTime = tm;
        hp = 0 ;
        exists = FALSE;
      }
      health[0] = tankID;                                
      health[1] = Math.round(hp); //Math.round(hp*decPlaces)/decPlaces			  
    }
    function recoilFrac(frac, tm){
      if(exists){
        if(barrel){
          barrel1.translation = new SFVec3f(0,0,2 - 2*frac)	;
          flare1.whichChoice = frac>.1 ? -1 : 0;
        }
        else{
          barrel2.translation = new SFVec3f(0,0,2 - 2*frac)	;
          flare2.whichChoice = frac>.1 ? -1 : 0	 ;
        }
      }
    }
    function get_angles(tm2,tm){
      if(exists){
        if(bindable){
          NI.set_bind = TRUE ;
          tv.set_bind = TRUE ;
        }
        calibrate_angles[0] = turret.rotation;
        calibrate_angles[1] = sleeve.rotation ;
        calibrate_angles[2] = new SFRotation(velocity,color[0],color[1],color[2]) ;
        nameOut = name ;
      }
    }
    function unbind(tm2,tm){
      NI.set_bind = FALSE ;
      tv.set_bind = FALSE ;
    }
    function shot_set(tm2,tm){ 
      if(exists){     
        //unbind(tm,tm)         
        barrelp1 = new MFVec3f(new SFVec3f(-2.2, 6.9, 1.5), new SFVec3f(-2.2, 6.9, -5.5));
        barrelp2 = new MFVec3f(new SFVec3f(2.2, 6.9, 1.5), new SFVec3f(2.2, 6.9, -5.5));
        barrel = barrel ? FALSE : TRUE ;
        if(barrel){
          barrel1.translation = new SFVec3f(0,0,2);
          flare1.whichChoice = 0;
          fire_order_given = barrelp2 ;
        }
        else{
          barrel2.translation = new SFVec3f(0,0,2);
          flare2.whichChoice = 0	;
          fire_order_given = barrelp1 ;
        }
        for(x = 0 ; x<2 ; x++){
  
          //rotate sleeve-wise
          matrix = new VrmlMatrix()	 ;
          matrix.setTransform(new SFVec3f,sleeve.rotation,new SFVec3f(1,1,1),new SFRotation,sleeve.center);
          fire_order_given[x] = matrix.multVecMatrix(fire_order_given[x]);    
  
          //rotate turret-wise
          matrix = new VrmlMatrix()  ;
          matrix.setTransform(new SFVec3f,turret.rotation,new SFVec3f(1,1,1),new SFRotation,turret.center);
          fire_order_given[x] = matrix.multVecMatrix(fire_order_given[x])  ; 
          
          //rotate,trnslate and scale to suit tank orientation,translation, and scale
          matrix = new VrmlMatrix();
          matrix.setTransform(tank.translation,tank.rotation,tank.scale) ;
          fire_order_given[x] = matrix.multVecMatrix(fire_order_given[x])    
																		   ;
        }
        fire_order_given[2][0] = velocity ;
	    fire_order_given[3] = new SFVec3f(color[0],color[1],color[2]);
        recoilTimer.startTime = tm;
        boom.startTime = tm	  ;
        set_fire_order = fire_order_given ;
      }
    }
    function set_angles(mfrotation,tm){
      //if(exists){
        turret.rotation = mfrotation[0];
        turret.rotation[3] = turret.rotation[3] * -1;
        sleeve.rotation = mfrotation[1]	;
        velocity = mfrotation[2][0];
      //}
    }
  "]
}
ROUTE dieTimer.fraction_changed TO tankScript.dieFrac
ROUTE recoilTimer.fraction_changed TO tankScript.recoilFrac
ROUTE dropTimer.fraction_changed TO tankScript.dropFrac
}
PROTO TankManager [
  field    SFInt32 currentPlayer -1                           # marker indicating the current player as a value from 0 to 3
  field    MFString tankNames ["Machine[p1]","Arnie[p2]","McBain[p3]","The Chosen One[p4]"]
  field    MFInt32 tanks [1,1,1,1]                           # series of integers used as booleans (as there is no MFBool object) each representing if a tank is 'on' or 'off', 1 is on, 0 is off
  field    MFString tankTeams ["1","2","3","4"]                       # series of integers representing the teams that the tanks belong to 
  field    MFColor tankColors [0.2 0.2 0.2,1 0 0,0 1 0,0 0 1]      # series of colour values representing the colours of each tank
  field    SFFloat timer 0                                   # value determing max length of time allowed for angle setting, zero designates infinite
  field    SFBool  passShot TRUE
  eventIn  MFVec3f tankLocations                             # event from the terrain object stating the starting locations of all tanks
  eventIn  SFBool  shotFinished                              # event from explosion or terrain stating that the shot is completed and the next tank may fire
  eventOut MFString tanksDead                                 # event sent to interface stating that all but one tank (or possibly team of tanks) is dead and therefore the game is over, the value determines the tanks that are winners 
  eventIn  SFBool  visible                                   # sets tanks visible or invisible while retaining all tank settings
  eventIn  SFTime  removeTanks                               #removes tanks from scene completely\
  eventIn  SFTime  shot_set            
  eventOut SFBool sfOut

  ##events directly from/to all tanks##

  eventIn  MFVec3f    expLocation
  eventIn  SFVec2f    expRadius 
  eventOut MFRotation calibrate_angles
  eventOut MFVec3f    explosionOut
  eventOut MFVec3f    set_fire_order
  eventOut MFFloat    health
  eventOut SFString   name 
  eventOut SFFloat    timerValue
  eventOut SFString   won

  eventOut SFBool calibrate_passShot
  eventOut MFInt32 calibrate_tanks                           # event sent to interface with the values of the tanks field to calibrate the options screen
  eventOut SFFloat calibrate_timer                           # as above except for the timer field
  eventOut MFString calibrate_tankTeams                       # as above except for the tankTeams field
  eventOut MFColor calibrate_tankColors                      # as above except for the tankColors field
  eventOut MFString calibrate_tankNames                      # "                       tankNames   "
  eventIn  SFBool set_passShot
  eventIn  MFRotation set_angles                                 # event from interface setting the angles and velocity of the active tank based on the HUD elements, note the last value represents the player, color and/or team of the angles
  eventIn  MFInt32 set_tanks                                 # event from interface changing the value of the tanks field
  eventIn  MFString set_tankTeams                             # as above except for the tankTeams field
  eventIn  MFColor set_tankColors                            # as above except for the tankColors field
  eventIn  SFFloat set_timer                                 # as above except for the timer field
  eventIn  MFString set_tankNames                            # "                       tankNames "
  eventIn  SFTime calibrateInterface                         # event from interface requesting any information concerning the options screens such as the values of tanks and tankColors

  eventOut MFInt32 tanks_changed                                 # special calibrate/set event taht is sent to Terrain to set the common Tanks value. 
  eventIn MFFloat tankHeights 
  eventIn SFFloat set_gravity
  eventOut SFBool isVisible 
  eventOut SFBool regen
  field SFBool bindable FALSE
  eventIn SFBool set_bind
  eventOut SFBool calibrate_bind
]
{
DEF visi Switch {
  whichChoice 0
  choice [
    DEF tGroup Group {
      children [
        DEF t1 Tank {
          orientation 0 1 0 3.1415
          tankID 0
          calibrate_angles IS calibrate_angles 
          expLocation IS expLocation       
          expRadius IS expRadius        
          explosionOut IS explosionOut
          set_fire_order IS set_fire_order         
          nameOut IS name 
          set_gravity IS set_gravity      
        }
        DEF t2 Tank {
          orientation 0 1 0 0
          tankID 1
          calibrate_angles IS calibrate_angles 
          expLocation IS expLocation       
          expRadius IS expRadius        
          explosionOut IS explosionOut
          set_fire_order IS set_fire_order   
          nameOut IS name     
          set_gravity IS set_gravity     
        }
        DEF t3 Tank {
          orientation 0 1 0 1.5707  
          tankID 2
          calibrate_angles IS calibrate_angles 
          expLocation IS expLocation       
          expRadius IS expRadius        
          explosionOut IS explosionOut
          set_fire_order IS set_fire_order   
          nameOut IS name   
          set_gravity IS set_gravity      
        }
        DEF t4 Tank {
          orientation 0 1 0 -1.5707
          tankID 3
          calibrate_angles IS calibrate_angles 
          expLocation IS expLocation       
          expRadius IS expRadius        
          explosionOut IS explosionOut
          set_fire_order IS set_fire_order   
          nameOut IS name      
          set_gravity IS set_gravity     
        } 
      ]
    }
  ]
}
						
DEF shotTimer TimeSensor {
}
DEF TankManager Script {
  eventIn SFInt32 dead
  field SFBool bindable IS bindable
  eventIn SFBool set_bind IS set_bind
  eventOut SFBool calibrate_bind IS calibrate_bind
  eventOut SFBool sfOut IS sfOut
  eventOut SFBool isVisible IS isVisible
  eventOut SFBool regen IS regen

  field    SFNode  visi USE visi
  field    SFNode  tGroup  USE tGroup
  field    SFInt32 currentPlayer IS currentPlayer
  field    MFInt32 tanks IS tanks                          
  field    MFString tankTeams IS tankTeams               
  field    MFColor tankColors IS tankColors    
  field    SFFloat timer IS timer     
  field    MFString tankNames IS tankNames
  field    MFFloat health [] 
  field    SFBool passShot IS passShot
  field    SFBool go FALSE
											 
  eventIn  SFBool set_passShot IS set_passShot
  eventOut SFString won IS won
  eventOut SFBool calibrate_passShot IS calibrate_passShot
  eventIn  MFVec3f tankLocations IS tankLocations                             
  eventIn  MFInt32 set_tanks IS set_tanks                         
  eventIn  MFString set_tankTeams IS set_tankTeams   
  eventIn  SFFloat set_timer IS set_timer                          
  eventIn  MFColor set_tankColors IS set_tankColors     
  eventIn  MFString set_tankNames IS set_tankNames                        
  eventIn  SFTime calibrateInterface IS calibrateInterface                         
  eventIn  MFRotation set_angles IS set_angles                                  
  eventIn  SFBool  shotFinished IS shotFinished                              
  eventOut MFRotation calibrate_angles IS calibrate_angles    
  eventOut MFString calibrate_tankNames IS calibrate_tankNames
  eventOut SFFloat calibrate_timer IS calibrate_timer             
  eventOut MFInt32 calibrate_tanks IS calibrate_tanks                           
  eventOut MFString calibrate_tankTeams IS calibrate_tankTeams                    
  eventOut MFColor calibrate_tankColors IS calibrate_tankColors      
  eventOut MFString tanksDead IS tanksDead  
  eventIn  SFTime  removeTanks IS removeTanks   
  eventIn  SFBool  visible IS visible
  eventOut MFInt32 tanks_changed IS tanks_changed
  eventIn  SFTime shot_set IS shot_set

  eventIn MFFloat healthIn
  eventOut MFFloat healthOut IS health

  field SFNode shotTimer USE shotTimer   
  eventIn SFFloat timer_changed
  eventOut SFFloat timerValue IS timerValue
  eventIn SFBool isActive

  eventIn MFFloat tankHeights IS tankHeights
  eventIn MFFloat tankActive 
  field MFInt32 active [0,0,0,0,1]
  directOutput TRUE        
  field SFBool firsthealth TRUE             
  url ["javascript:
    function dead(sfint32,tm){
      healthIn(new MFInt32(sfint32,0),1)  ;
    }
    function isActive(bool,tm){
      if(bool == FALSE){  
        if(passShot){ 
          sfOut = TRUE;
          //tGroup.children[currentPlayer].unbind = tm
          shotFinished(0,0)	 ;
          shotTimer.startTime = tm	;
        }
        else{         
          shot_set(0,0)	;
        }
      }
    }
    function tankActive(mfint32,tm){
      active[mfint32[0]] = mfint32[1] == 1 ? 1 : 0;
      sf = 1;
      for(a = 0 ; a < 5 ; a++){
        if(active[a] == 1){
          sf = 0;
        }
      } 
      if(sf == 1){
        shotFinished(TRUE,tm) ;
        active = new MFInt32(0,0,0,0,1);
      }

    }
    function tankHeights(mffloat,tm){
      if(tanks[1] != 0 && tanks[2] != 0){
        carry = mffloat[1] ;
        mffloat[1] = mffloat[2];
        mffloat[2] = carry;	   
      }       
      for(a = 0 ; a < 4 ; a++){
        if(tanks[a] != 0){
          tGroup.children[a].drop = mffloat[a];
        }
      }
    }
    function timer_changed(frac,tm){
      timerValue = (1 - frac) * timer ;
    }
    function initialize(){
      calibrate_timer = timer ;
      set_tanks(tanks,0) ;
      calibrate_tanks = tanks ;
    }
    function healthIn(mfint32, tm){ 
      health[mfint32[0]] = mfint32[1] ;
	    if(firsthealth){
	      for(a = 0;a < 4;a++){
			    health[a] = tanks[a] == 1 ? mfint32[1] : 0 ;
		    }
	    }
      if(health[mfint32[0]] == 0){
        tank = 0 ;
        alive = 0;
        tanks[mfint32[0]] = -1	;
        for(a = 0;a < 4;a++){
          tank = tanks[a] > 0 ? a : tank  ;
          alive = tanks[a] == 1 ? alive + 1 : alive	 ;
        }
        if(alive == 1){
          go = TRUE;
        }
        else{
          tanksDead = new MFString(tankNames[mfint32[0]] + ' has died');
        }
      }
      healthOut = health  ;
	  firsthealth = FALSE  ;
    }
    function shot_set(tm2,tm){
      shotTimer.stopTime = tm ;
      tGroup.children[currentPlayer].shot_set = tm;
    }
    function visible(bool, tm){
      isVisible = bool; 
      visi.whichChoice = bool ? 0 : -1 ;
    }
    function removeTanks(tm2,tm){ 
      for(a = 0; a < 4 ; a++){
        tGroup.children[a].exist = FALSE ; 
        regen = FALSE;
        shotTimer.stopTime = tm;
      } 
    }
    function tankLocations(mfvec3f,tm){    
      regen = TRUE;
      firsthealth = TRUE;
      go = FALSE ;
      currentPlayer = -1 ;
      scale = mfvec3f[4][0]/10 ;
      if(tanks[1] == 1 && tanks[2] == 1){
        tGroup.children[2].orientation[3] = 0 ;
        tGroup.children[1].orientation[3] = 1.5707;
      }
      else{
        tGroup.children[2].orientation[3] = 1.5707;
        tGroup.children[1].orientation[3] = 0 ;    
      }
      for(a = 0 ; a < 4 ; a++){         
        tGroup.children[a].exist = FALSE ;   
        if(tanks[a] == 1){
          tGroup.children[a].isBindable = bindable ;
          tGroup.children[a].exist = TRUE ;
          tGroup.children[a].location = mfvec3f[a] ;
          tGroup.children[a].set_color = tankColors[a];
          tGroup.children[a].set_name = tankNames[a];
          tGroup.children[a].scale = new SFVec3f(scale,scale,scale);
        }                                
      }
      shotFinished(0,tm) ;
    } 
    function set_passShot(bool,tm){
      passShot = bool;
    }
    function set_timer(frac,tm){
      timer = frac ;
      calibrate_timer = timer;
      shotTimer.cycleInterval = frac;
    }
    function set_tanks(mfint,tm){
      tanks = mfint;
      tanks_changed = tanks;   
    }
    function set_tankTeams(mfint,tm){
      tankTeams = mfint	;
    }
    function set_tankColors(mfcolor,tm){
      tankColors = mfcolor;
    }
    function set_tankNames(mfstring,tm){
      tankNames = mfstring;
    }
    function calibrateInterface(tm2,tm){
      calibrate_passShot = passShot	;
      calibrate_timer = timer ;
      calibrate_tanks = tanks ;
      calibrate_tankNames = tankNames; 
      calibrate_tankColors = tankColors;
      calibrate_tankTeams = tankTeams ;
      calibrate_bind = bindable	;
    } 
    function set_bind(sfbool,tm){
      bindable = sfbool; 
    }
    function set_angles(mfrot,tm){
      tGroup.children[currentPlayer].set_angles = mfrot;
    }
    function shotFinished(sfbool,tm){
      if(sfbool){
        tanksDead = new MFString();
		alive = tanks[0] == 1 || tanks[1] == 1 || tanks[2] == 1 || tanks[3] == 1 ? TRUE : FALSE	;
        currentPlayer++ ;   
        if(alive){  
          for(a = currentPlayer ; tanks[a] != 1 ; a++){
            a = a > 3 ? -1 : a ;
          }
        }
        currentPlayer = a;
        if(go == FALSE){
          if(timer > 0){
            shotTimer.startTime = tm ;
            shotTimer.cycleInterval = timer;
          }
          tGroup.children[currentPlayer].get_angles = tm;
        }
        else{                                                                                    
          for(a = 0 ; a < 4 ; a++){
            tanks[a] = tanks[a] != 0 ? 1 : 0 ;
          }      
          won = alive ? tankNames[currentPlayer] : 'no one'	;
          won += ' has won';
        }
      }
      else{
        tankActive(new MFInt32(4,0),tm)	;
      }
      if(timer > 0){
        shotTimer.startTime = tm;
      }
    }
  "]
}
ROUTE shotTimer.isActive TO TankManager.isActive
ROUTE shotTimer.fraction_changed TO TankManager.timer_changed 
ROUTE t1.health TO TankManager.healthIn
ROUTE t2.health TO TankManager.healthIn
ROUTE t3.health TO TankManager.healthIn
ROUTE t4.health TO TankManager.healthIn
ROUTE t1.dead TO TankManager.dead   
ROUTE t2.dead TO TankManager.dead
ROUTE t3.dead TO TankManager.dead
ROUTE t4.dead TO TankManager.dead
}
PROTO Terrain [
  eventOut SFVec3f calibrate_gridSize 
  field SFInt32 xd 40                         #the x dimension in 1 meter units of the terrain grid
  field SFInt32 zd 40                         #the z dimension in 1 meter units of the terrain grid
  field SFInt32 smooth 6                      #the number of times the terrain is smoothed
  field SFFloat maxHeight 20                  #the highest point in the terrain grid
  field SFBool  shading TRUE                  #is the crease angle set to 3.14 or 0
  field MFInt32 tanks []                      #an array of 1 or 0 values used in determining which players are active, the initial value of this field is irrelevent as it is calibrated with the TankManager corresponding value on program start. 
  field SFColor damageColor 1 .3 0 #0.502 0.251 0.0   #the terrain colour for damaged terrain
  field SFColor bottomColor .4 .05 0 #0.25 0.1 0        #the terrain colour at y = 0
  eventIn  SFBool   generate                  #generate a new random terrain based on the current terrain settings
  eventIn  SFTime   placeTanks                #place tanks on the currently generated terrain
  eventIn  SFVec3f  projectileLocation        #set the projectile location, will return the value of zoneout or collision
  eventOut SFFloat  collisionHeight           #one possible return value for projectileLocation, states the height of the projectile location on impact
  eventOut SFBool   shotFinished              #the other possible return of projectileLocation, stating when the projectile has left the terrain area, sent to both tank manager and projectile
  eventOut MFVec3f  tankLocations             #return value of placeTanks stating the Vec3f locations of all tanks in the game
  eventIn  SFBool   visibleIn                 #when visible is FALSE terrain does not exist, the eventIn generate will have to be called to reinstate the terrain again
  eventOut SFBool   visibleOut                #sets tanks to invisible so they are visible when terrain is visible
  eventOut SFTime   removeTanks               #remove tanks completely, used when generate is false
   
  eventIn  SFInt32  set_Xd                    #sets corresponding field value
  eventIn  SFInt32  set_Zd                    #          "
  eventIn  SFBool   set_shading               #          "
  eventIn  SFInt32  set_smooth                #          "
  eventIn  SFFloat  set_maxHeight             #          "
  eventIn  MFInt32  set_tanks                 #          "                    note: this event comes from TankManager rather than the interface so taht the value Tanks is only set and calibrated from the TankManager object, not both TankManager and Terrain. 
  eventIn  SFTime   calibrateInterface        #returns the current value of all alterable fields, to be used to calibrate an interface to the current settings
  eventOut SFInt32  calibrate_Xd              #the value returned by calibrateInterface
  eventOut SFInt32  calibrate_Zd              #          "
  eventOut SFBool   calibrate_shading         #          "
  eventOut SFInt32  calibrate_smooth          #          "
  eventOut SFFloat  calibrate_maxHeight       #          "

  eventIn  MFVec3f  explosion
  eventOut MFFloat  tankHeights
  eventOut SFBool calibrate_animGen
  eventIn SFBool set_animGen
  field SFBool animGen FALSE
  field SFBool terrainDamage TRUE
  eventIn SFBool set_terrainDamage
  eventOut SFBool calibrate_terrainDamage
  field SFBool paintBall FALSE
  eventIn SFBool set_paintBall
  eventOut SFBool calibrate_paintBall
  field SFInt32 baseColor 2
  eventIn SFInt32 set_baseColor
  eventOut SFInt32 calibrate_baseColor
  field SFBool whiteFade FALSE
  eventIn SFBool set_whiteFade
  eventOut SFBool calibrate_whiteFade
  field MFColor damageColors [1 .3 0,0.502 0.251 0.0,0.7 0 1,1 1 1,0.502 0.251 0.0,1 1 1]
  field MFColor bottomColors [.4 .05 0,0.25 0.1 0 ,.525 0 .75,1 1 1,0.25 0.1 0 ,.9 .9 .9]
  field SFBool gos FALSE
  eventIn SFBool set_gos
  eventOut SFBool calibrate_gos
  eventOut MFNode viewPoints 
  eventIn SFTime createViews
  eventOut SFTime genDone
]
{ 
Group {
  children [
    DEF hc Transform {
      children [      
        DEF sGroup Switch{   
          choice [
            DEF trans Transform {
              children [
                DEF sGos Switch {
                  choice [
                    DEF gosford Transform {
                      children[      
                        Billboard {
                          children [
                            DirectionalLight {
                              direction 0.1 -0.5 -0.5
                            }
                            Transform {
                              translation 0 5 0
                              children [
                                Shape {
                                  appearance Appearance {
                                    material Material {
                                      #emissiveColor 1 1 1
                                    }
                                  }
                                  geometry Box {
                                    size 5 2.5 0.1
                                  }
                                }
                                DEF sign EventCapture {
                                  name "GOSFORD"
                                  location -2.2 0 0.11
                                }
                              ]
                            }
                            Transform {
                              translation 0 2 0
                              scale 0.35 2 0.35
                              children [
                                Shape {
                                  appearance Appearance {
                                    material Material {
                                      #emissiveColor 1 1 1
                                    }
                                  }
                                  geometry Cylinder {  
                                  }
                                }
                              ]
                            }   
                          ]
                        }
                      ]
                    }
                  ]
                }
                DEF tGroup Group {
                }
              ]
            } 
          ]
        }
        DEF gGroup Group {
          children [
            Shape {
              appearance Appearance {
                material Material {
                  emissiveColor 0.5 0.5 0.5
                }
              }
              geometry IndexedLineSet {
                coord Coordinate {
                }
              }
            }
          ]
        } 
      ]
    }
    DEF interView Viewpoint {
    }
  ]
}
DEF genTimer TimeSensor {
  cycleInterval 60
  loop TRUE    
  stopTime 1
}    
DEF expTimer TimeSensor {
  cycleInterval 10
  loop TRUE  
  stopTime 1
}
DEF tGen Script {  
	eventOut SFTime genDone IS genDone
  field SFNode hc USE hc
  field SFNode interView USE interView
  eventIn SFTime createViews IS createViews
  field SFNode view1 Viewpoint {description "front"}
  field SFNode view2 Viewpoint {description "back"}
  field SFNode view3 Viewpoint {description "left"}
  field SFNode view4 Viewpoint {description "right"}
  field SFNode view5 Viewpoint {description "top"}
  eventOut MFNode viewPoints IS viewPoints            

  #GOSFORD STUFF
  field SFNode sGos USE sGos
  field SFNode gosford USE gosford
  field SFBool gos IS gos
  eventIn SFBool set_gos IS set_gos
  eventOut SFBool calibrate_gos IS calibrate_gos
  #GOSFORD STUFF

  field SFInt32 baseColor IS baseColor
  eventIn SFInt32 set_baseColor IS set_baseColor
  eventOut SFInt32 calibrate_baseColor IS calibrate_baseColor
  field SFBool whiteFade IS whiteFade
  eventIn SFBool set_whiteFade IS set_whiteFade
  eventOut SFBool calibrate_whiteFade IS calibrate_whiteFade
  field SFBool paintBall IS paintBall
  eventIn SFBool set_paintBall IS set_paintBall
  eventOut SFBool calibrate_paintBall IS calibrate_paintBall
  field SFBool animGen IS animGen
  eventIn SFBool set_animGen IS set_animGen
  eventOut SFBool calibrate_animGen IS calibrate_animGen
  eventOut SFVec3f calibrate_gridSize IS calibrate_gridSize
  field SFNode expTimer USE expTimer
  eventIn SFFloat expFrac
  field MFInt32 tpos []
  eventIn SFFloat	set_frac
  field	SFInt32	events -1
  field SFFloat scaleFac 0
  field MFFloat tempGrid []
  field SFFloat lowest 0
  field SFBool exists FALSE

  field SFInt32  xd IS xd
  field SFInt32  zd IS zd
  field SFBool   shading IS shading
  field SFInt32  smooth IS smooth
  field SFFloat  maxHeight IS maxHeight
  field MFInt32 tanks IS tanks
  field SFColor damageColor IS damageColor 
  field SFColor bottomColor IS bottomColor
  field MFFloat lGridHeight []
  field MFColor lGridColor []
  field MFFloat ftankHeights [0,0,0,0]
  field SFNode  tGroup USE tGroup
  field SFNode  gGroup USE gGroup
  field SFNode  sGroup USE sGroup
  field SFNode  this USE tGen
  field SFNode  genTimer USE genTimer
  field MFNode  mfnode Box {}
  field SFFloat tankRand 1
  field MFVec3f ftankpos []
  eventIn  SFInt32  set_Xd IS set_Xd
  eventIn  SFInt32  set_Zd IS set_Zd
  eventIn  SFBool   set_shading IS set_shading
  eventIn  SFInt32  set_smooth IS set_smooth
  eventIn  SFFloat  set_maxHeight IS set_maxHeight
  eventIn MFInt32  set_tanks IS set_tanks
  eventIn SFBool   generate IS generate
  eventIn SFTime   placeTanks IS placeTanks
  eventIn SFVec3f  projectileLocation IS projectileLocation 
  eventIn  SFTime   calibrateInterface IS calibrateInterface 
  eventOut SFInt32  calibrate_Xd IS calibrate_Xd
  eventOut SFInt32  calibrate_Zd IS calibrate_Zd
  eventOut SFBool   calibrate_shading IS calibrate_shading
  eventOut SFInt32  calibrate_smooth IS calibrate_smooth
  eventOut SFFloat  calibrate_maxHeight IS calibrate_maxHeight
  eventOut SFFloat collisionPosition IS collisionHeight
  eventOut SFBool  zoneOut IS shotFinished
  eventOut MFVec3f tankLocations IS tankLocations
  eventIn  SFBool  visibleIn IS visibleIn
  eventOut SFBool  visibleOut IS visibleOut
  eventOut SFTime  removeTanks IS removeTanks
  eventIn  MFVec3f explosion IS explosion
  eventOut MFFloat tankHeights IS tankHeights
  field SFBool terrainDamage IS terrainDamage
  eventIn SFBool set_terrainDamage IS set_terrainDamage
  eventOut SFBool calibrate_terrainDamage IS calibrate_terrainDamage
  field MFColor damageColors IS damageColors
  field MFColor bottomColors IS bottomColors
  field SFColor randomColor 0 0 0 
  directOutput TRUE
  url ["javascript:
    function initialize(){      
      createViews() ;                        
      damageColor = whiteFade ? damageColors[baseColor+3] : damageColors[baseColor];
      bottomColor = whiteFade ? bottomColors[baseColor+3] : bottomColors[baseColor]	;
      generateGrid() ;
      sGos.whichChoice = gos ? 0 : -1 ; 
      terrainDamage = paintBall ? FALSE : TRUE ;
      calibrate_paintBall = paintBall  ; 
    }
    function createViews(sftime,tm){
      view1.position = new SFVec3f(xd/2,xd/6,zd+xd*0.6);
      view2.position = new SFVec3f(xd/2,xd/6,xd*-0.6);
      view2.orientation = new SFRotation(0,1,0,3.1415) ;
      view3.position = new SFVec3f(zd*-0.6,zd/6,zd/2) ;
      view3.orientation = new SFRotation(0,1,0,-1.5707);
      view4.position = new SFVec3f(xd+zd*0.6,zd/6,zd/2);
      view4.orientation = new SFRotation(0,1,0,1.5707) ;
      view5.orientation = new SFRotation(1,0,0,-1.5707);
      intz = xd/zd > 2 ? xd/2 : zd ;
      view5.position = new SFVec3f(xd/2,maxHeight+intz*1.4,zd/(2.5));// : new SFVec3f(xd/2,maxHeight+zd*1.4,zd/(2.5))
      interView.position = view1.position;
      interView.set_bind = TRUE	 ;
      viewPoints = new MFNode(view1,view3,view2,view4,view5) ;  
    }
    function explosion(mfvec3f,tm){       
      if(terrainDamage || paintBall){
        expinfo = mfvec3f  ;
        events = -1	;
        expTimer.startTime = tm;
        exped = FALSE  ;
        randomColor = new SFColor(mfvec3f[2][0],mfvec3f[2][1],mfvec3f[2][2]);
      }
    }
    function expFrac(sffloat,tm){
      events++;

      //checkPoint(events)
      if(events >= Math.ceil(expinfo[1][0])*2+2){    
        exped = TRUE ;
        oldpos = new MFFloat();
        for(x = 0 ; x < 4 ; x++){
          oldpos[x] = ftankHeights[x];
        }
        for(a = 0 ; a < 4 ; a++){
          if(tanks[a] == 1){
            flat4x4(tpos[a]) ;
            ftankHeights[a] = lGridHeight[tpos[a]] ;
          }
        }
        newpos = new MFFloat();
        for(x=0;x<4;x++){
          newpos[x] = ftankHeights[x] ;
        }
        hchange = new MFFloat();
        for(x=0;x<4;x++){
          hchange[x] = oldpos[x] - newpos[x];
        }
        tankHeights = hchange;
        expTimer.stopTime = tm;
        if(exists){
          tGroup.children[0].geometry.color.color = lGridColor ;
          tGroup.children[0].geometry.set_height = lGridHeight ;
        }  
      }   
      else{
        startline = xd*(Math.floor(expinfo[0][2])-Math.floor(expinfo[1][0])+events-1)+Math.floor(expinfo[0][0])-Math.floor(expinfo[1][0]);
        for(a = startline ; a < startline + Math.ceil(expinfo[1][0])*2+1  ; a++){ 
          if(a < xd*zd){
            checkPoint(a) ;
          }       
        }                                                    
      }
    }
    function checkPoint(a){
      radius = expinfo[1][0];
      z = Math.floor(a/xd);
      x = a - z*xd	;
      nearZ = expinfo[0][2]	;
      nearX = expinfo[0][0]	;
      xdist = nearX - x	 ;
      zdist = nearZ - z;
      if(Math.abs(xdist) <= radius && Math.abs(zdist) <= radius){
        zxdist = Math.sqrt(Math.pow(zdist,2) + Math.pow(xdist,2));
        if(zxdist <= radius){
          offsetheight = Math.sqrt(Math.pow(radius,2) - Math.pow(zdist,2) - Math.pow(xdist,2));
          height = expinfo[0][1] - offsetheight < 0 ? 0 : expinfo[0][1] - offsetheight;
          if(lGridHeight[a] >= height){                           
            lGridHeight[a] = terrainDamage ? height : lGridHeight[a] ;
            lGridColor[a] = height == 0 ? bottomColor : damageColor	;
            lGridColor[a] = paintBall ? randomColor : lGridColor[a] ;
          }
        }
      }
    }
    function exp(mfvec3f,tm){
      if(terrainDamage || paintBall ){
        radius = mfvec3f[1][0] ;
        for(a = 0 ; a < (xd * zd) ; a++){
          z = Math.floor(a/xd) ;
          x = a - z*xd ;
          nearZ = mfvec3f[0][2]	 ;
          nearX = mfvec3f[0][0]	;
          xdist = nearX - x	 ;
          zdist = nearZ - z	 ;
          if(xdist <= radius && zdist <= radius){
            zxdist = Math.sqrt(Math.pow(zdist,2) + Math.pow(xdist,2));
            if(zxdist <= radius){
              offsetheight = Math.sqrt(Math.pow(radius,2) - Math.pow(zdist,2) - Math.pow(xdist,2)) ;
              height = mfvec3f[0][1] - offsetheight < 0 ? 0 : mfvec3f[0][1] - offsetheight ;
              if(lGridHeight[a] >= height){ 
                lGridHeight[a] = terrainDamage ? height : lGridHeight[a] ;
                lGridColor[a] = height == 0 ? bottomColor : damageColor	 ;
                lGridColor[a] = paintBall ? new SFColor(Math.random(),Math.random(),Math.random()) : lGridColor[a]; 
              }
            }
          }
        }
        oldpos = new MFFloat();
        for(x=0;x<4;x++){
          oldpos[x] = ftankHeights[x];
        }
        placeTanks(-1,-1);
        newpos = new MFFloat();
        for(x=0;x<4;x++){
          newpos[x] = ftankHeights[x] ;
        }
        hchange = new MFFloat();
        for(x=0;x<4;x++){
          hchange[x] = oldpos[x] - newpos[x] ;
        }
        tankHeights = hchange;                               
        if(exists){
          tGroup.children[0].geometry.color.color = lGridColor ;
          tGroup.children[0].geometry.set_height = lGridHeight ;
        }  
      }
    }
    function generateGrid(){
      calibrate_gridSize = new SFVec3f(xd,zd,maxHeight);
      coords = new MFVec3f ;
      index = new MFInt32 ;
      height = -1;
      for(a = 0 ; a < xd-1 ; a++){
        coords[a] = new SFVec3f(a,height,0)	;
        coords[a+xd] = new SFVec3f(a,height,zd-1) ;
        index[a*3] = a;
        index[a*3+1] = a + xd ;
        index[a*3+2] = -1 ;
      }
      for(a = 0 ; a < zd ; a++){
        coords[xd*2+a] = new SFVec3f(0,height,a);
        coords[xd*2+a+zd] = new SFVec3f(xd-1,height,a) ;
        index[xd*3+a*3] = xd*2+a;
        index[xd*3+a*3+1] = xd*2+a+zd;
        index[xd*3+a*3+2] = -1;
      }
      coords[xd*zd*2] = new SFVec3f(xd-1,height,0);
      coords[xd*zd*2+1] = new SFVec3f(xd-1,height,zd-1);
      index[xd*3+zd*3+3] = xd*zd*2;
      index[xd*3+zd*3+4] = xd*zd*2+1;
      index[xd*3+zd*3+5] = -1;
      gGroup.children[0].geometry.coord.point = coords ;
      gGroup.children[0].geometry.set_coordIndex = index ;
      hc.center = new SFVec3f(xd/2,0,zd/2);
    }
    function visibleIn(bool,tm){
      sGroup.whichChoice = bool ? 0 : -1;
      visibleOut = bool	;
    }
    function calibrateInterface(tm,tm2){
      calibrate_Xd = xd;
      calibrate_Zd = zd;
      calibrate_shading = shading;
      calibrate_smooth = smooth	;
      calibrate_maxHeight = maxHeight;
      calibrate_animGen = animGen ;
      calibrate_terrainDamage = terrainDamage  ;
      calibrate_paintBall = paintBall  ;
      calibrate_whiteFade = whiteFade ;
      calibrate_baseColor = baseColor;
      calibrate_gos = gos;
    }
    function set_baseColor(sfint32,tm){
      if(sfint32 <= 2 && sfint32 >= 0 ){
        baseColor = sfint32;                   
        damageColor = whiteFade ? damageColors[baseColor+3] : damageColors[baseColor];
        bottomColor = whiteFade ? bottomColors[baseColor+3] : bottomColors[baseColor];
      }
    }
    function set_gos(sfbool,tm){
      sGos.whichChoice = sfbool ? 0 : -1; 
      gos = sfbool ;
    }
    function set_whiteFade(sfbool,tm){
      whiteFade = sfbool;
      damageColor = whiteFade ? damageColors[baseColor+3] : damageColors[baseColor];
      bottomColor = whiteFade ? bottomColors[baseColor+3] : bottomColors[baseColor];
    }
    function set_paintBall(sfbool,tm){ 
      if(sfbool == TRUE && sfbool != paintBall){
        terrainDamage = FALSE ;
        calibrate_terrainDamage = FALSE;
      }
      calibrate_paintBall = sfbool;
      paintBall = sfbool; 
    }
    function set_Xd(intr,tm){
      xd = intr ;                
      generateGrid();                                   
    }
    function set_Zd(intr,tm){
      zd = intr;
      generateGrid();                                    
    }
    function set_animGen(bool,tm){
      animGen = bool;             
    }
    function set_terrainDamage(sfbool,tm){
      terrainDamage = sfbool;
    }
    function set_smooth(intr,tm){
      smooth = intr ;            
    }
    function set_shading(bool,tm){
      shading = bool;              
    }
    function set_maxHeight(real,tm){
      maxHeight = real ;                                          
    }
    function set_tanks(sfint32,tm){ 
      tanks = sfint32 ;          
    }
    function generate(bool,tm){ 
      if(bool){
        exists = TRUE ;
        createTerrain(tm) ;   
        calibrate_gridSize = new SFVec3f(xd,zd,maxHeight); 
      }
      else{
        genTimer.stopTime = tm ;  
        hc,rotation = new SFRotation() ;    
        tGroup.children = new MFNode() ;
        removeTanks = tm;
        exists = FALSE ;           
      }
    }
    function placeTanks(tm1,tm){
      if(tm > 0){
        tankRand = Math.random();  
      }
      rand = tankRand ;
      rand1 = Math.round(rand * (xd - 12));
      t1point = 3 * xd + rand1 + 3;
      if(tanks[0] == 1){
        flat4x4(t1point);
        tpos[0] = t1point ;
        ftankHeights[0] = lGridHeight[t1point];
        ftankpos[0] = new SFVec3f(rand1+3,ftankHeights[0],3);
      }
      rand2 = Math.round(rand * (zd - 12));
      t2point = xd * (rand2 + 4) - 4;
      if(tanks[1] == 1){        
        t3point = xd*zd - t1point - 1;
        flat4x4(t3point);
        tpos[1] = t3point;
        ftankHeights[1] = lGridHeight[t3point] ;
        ftankpos[1] = new SFVec3f(xd-(rand1+4),ftankHeights[1],zd-4)   ;
        carry = new SFVec3f(xd-(rand1+4),ftankHeights[1],zd-4);      
        carryh = ftankHeights[1];                       
      }
      if(tanks[2] == 1){  
        flat4x4(t2point);
        tpos[2] = t2point ;
        ftankHeights[2] = lGridHeight[t2point] ;
        ftankpos[2] = new SFVec3f(xd-4,ftankHeights[2],rand2+3);     
      }
      if(tanks[3] == 1){
        t4point = xd * zd - 1 - t2point;
        flat4x4(t4point);
        tpos[3] = t4point;
        ftankHeights[3] = lGridHeight[t4point];
        ftankpos[3] = new SFVec3f(3,ftankHeights[3],zd-(rand2+4)) ;
      }                    
      ftankpos[4] = new SFVec3f(2,0,0);
      if(tanks[1] == 1 && tanks[2] == 1){    
        ftankpos[1] = ftankpos[2];
        ftankpos[2] = carry	;
//        ftankHeights[1] = ftankHeights[2]
//        ftankHeights[2] = carryh
      }
      if(tm > 0){
        tankLocations = ftankpos;
      }                                                       
      if(exists){                   
        tGroup.children[0].geometry.set_height = lGridHeight; 
      }  
    }
    function projectileLocation(vec3f,tm){
      //find height of nearest point
      nearX = Math.round(vec3f[0]);
      nearZ = Math.round(vec3f[2]);
      hp = (xd * nearZ) + nearX;
      //check if shell has moved out of terrain block
      if(0 > vec3f[0] || vec3f[0] > xd || 0 > vec3f[2] || vec3f[2] > zd ){
        zoneOut = TRUE ;
      } 
      else if(vec3f[1] < lGridHeight[hp]){
        //compare height with nearest point, if it is lower 
        //than the nearest point, set explosion height to nearest point
        collisionPosition = lGridHeight[hp]	 ;
      }
    }
	  function createTerrain(tm){ 
      events = -2 ;
	    genTimer.startTime = tm;    
	  }
    function fastGen(tm){
      for(x = 0 ; x < xd*zd ; x++){
        lGridHeight[x] = 0  ;        
        lGridColor[x] = new SFColor(0,0,0);
        lGridColor[x][baseColor] = 1 ;
      }
      createTerrainObj();                      	 
      for(x = 0 ; x < (xd*zd) ; x++ ){
        randomize(x)  ;
      }  
      tempGrid = lGridHeight;
      for(s = 0 ; s < smooth ; s++){    
        for(a = 0 ; a < (xd * zd) ; a++){ 
          smoother(a);
        }
      }
      lGridHeight = tempGrid ;
      findScale() ;
      for(a = 0 ; a <xd*zd ; a++){
        lGridHeight[a] = tempGrid[a]*scaleFac;
        intensity = lGridHeight[a]/maxHeight ; 
        if(whiteFade){
          lGridColor[a] = new SFColor(intensity,intensity,intensity) ;
          lGridColor[a][baseColor] = 1;
        }
        else{
          lGridColor[a] = new SFColor(0,0,0) ;
          lGridColor[a][baseColor] = 1-intensity ;
        }
      }     
      tGroup.children[0].geometry.color.color = lGridColor;
      tGroup.children[0].geometry.set_height = lGridHeight; 
      genDone = tm; 
      genTimer.stopTime = tm ;
    }
	  function set_frac(sffloat,tm){
      if(animGen){
	      events++ ;
	      if(events <= 0){
          if(events == -1){
            for(a = 0 ; a < xd*zd ; a++){
              lGridHeight[a] = 0;
              lGridColor[a] = new SFColor(0,0,0);
              lGridColor[a][baseColor] = 1;
            }
            createTerrainObj(tm);
          }
        } 
        else{
          events-- ;
          if(events < zd){
            for(a = events * xd ; a < (events+1) * xd  ; a++){
              randomize(a);
              intensity = lGridHeight[a]/maxHeight ;       
              if(whiteFade){
                lGridColor[a] = new SFColor(intensity,intensity,intensity);
                lGridColor[a][baseColor] = 1;
              }
              else{
                lGridColor[a] = new SFColor(0,0,0) ;
                lGridColor[a][baseColor] = 1-intensity ;
              } 
            }
            tempGrid = lGridHeight;
          }
          else{
            events -= zd;
            if(events == 0){
              for(a = 0 ; a < xd*zd ; a++){
                smoother(a)	;
              }
            }
            if(events < zd*(smooth+1)){    
              if(events/zd == Math.floor(events/zd)){
                findScale();
              }
              sp = (events/zd - Math.floor(events/zd))*zd ;
              for(a = sp*xd ; a < (sp + 1)*xd ; a++){
                a = Math.round(a) ;
                lGridHeight[a] = tempGrid[a]*scaleFac ;
                intensity = lGridHeight[a]/maxHeight ;       
                if(whiteFade){
                  lGridColor[a] = new SFColor(intensity,intensity,intensity);
                  lGridColor[a][baseColor] = 1;
                }
                else{
                  lGridColor[a] = new SFColor(0,0,0);
                  lGridColor[a][baseColor] = 1-intensity ;
                }        
                smoother(a); 
              }
            } 
            else{
              genTimer.stopTime = tm ; 
              genDone = tm ;     
            }
            events += zd ;
          }
          events++;
        }
        if(events < zd*(smooth+1)){                             
          if(exists){
            tGroup.children[0].geometry.color.color = lGridColor;
            tGroup.children[0].geometry.set_height = lGridHeight ;
          }  
        }
        else{
          tempGrid = lGridHeight;
        }
      }
      else{
        events++;
        if(events == 2){
          fastGen(tm);
        }
      }
	  }
    function findScale(){
      highest = 0 ;
      gosf = 0;  //GOSFORD STUFF
      lowest = maxHeight;
      for(a = 0 ; a < xd*zd ; a++){
        lowest = lowest < tempGrid[a] ? lowest : tempGrid[a] ;
        gosf = lowest < tempGrid[a] ? gosf : a ;   //GOSFORD STUFF 
      }              
      z = Math.floor(gosf / xd);  //GOSFORD STUFF
      x = gosf - (z * xd) ;       //GOSFORD STUFF 
      gosford.translation = new SFVec3f(x,0,z) ;//GOSFORD STUFF
      for(a = 0 ; a < xd*zd ; a++){    
        tempGrid[a] = tempGrid[a] - lowest ;
        highest = highest > tempGrid[a] ? highest : tempGrid[a] ;  
      }
      scaleFac = maxHeight/highest; 
    }
    function randomize(x){             
      randSize = (xd * zd)/4;
      rand = Math.round(Math.random() * randSize) ;
      if(rand <= randSize/64){
        lGridHeight[x] = maxHeight;
      }
      else{
        if(rand <= randSize/32){ 
          lGridHeight[x] = maxHeight/2 ;
        }
        else{
          if(rand <= randSize/16){
            lGridHeight[x] = maxHeight/4; 
          }
          else{
            if(rand <= randSize/8){
              lGridHeight[x] = maxHeight/8;
            }
            else{
              if(rand <= randSize/4){
                lGridHeight[x] = maxHeight/16;
              }
              else{
                if(rand <= randSize/2){
                  lGridHeight[x] = maxHeight/32	;
                }
                else{
                  lGridHeight[x] = 0;
                }
              }
            }
          }
        }
      }                                                     
      if(exists){
        tGroup.children[0].geometry.color.color = lGridColor;
        tGroup.children[0].geometry.set_height = lGridHeight;
      }  
    }
    function smoother(a){           
      total = 0 ;
      count = 0 ;
      //a = (xd * z) + x
      z = Math.floor(a / xd);
      x = a - (z * xd);
      if(z > 0){
        if(x > 0){
          total += tempGrid[a - (xd+1)] ; 
          count++ ;
        }  
        total += tempGrid[a - xd] ;
        count++	;
        if(x < xd-1){
          total += tempGrid[a - (xd-1)] ;  
          count++;  
        } 
      }
    
      if(x > 0){
        total += tempGrid[a - 1] ;     
        count++;
      }
      total += tempGrid[a] ;
      count++;
      if(x < zd-1){
        total += tempGrid[a + 1] ;
        count++;
      }
    
      if(z < zd-1){
        if(x > 0){
          total += tempGrid[a + (xd+1)] ; 
          count++;
        }     
        total += tempGrid[a + xd] ;  
        count++;
        if(x < xd-1){
          total += tempGrid[a + (xd-1)] ;    
          count++ ;
        } 
      }
      tempGrid[a] = total/count;             
    }
    function flat4x4(point){
      point -= 2*(xd + 1);
      total = 0;
      for(x = 0 ; x < 5 ; x++){
        for(z = 0 ; z < 5 ; z++){
          total += lGridHeight[point + (z * xd) + x] ;
        }
      }
      average = total / 25;
      for(x = 0 ; x < 5 ; x++){
        for(z = 0 ; z < 5 ; z++){
          lGridHeight[point + (z * xd) + x] = average;           
        }
      }
    }
    function createTerrainObj(tm){
      terrainString = 'Shape {'+
                      '  appearance Appearance {'+
                      '    material Material {'+
                      '    }'+
                      '  }'+
                      '  geometry DEF terrain ElevationGrid {'+
                      '    xDimension ' + xd +
                      '    zDimension ' + zd;
      if(shading == TRUE){
        terrainString += 'creaseAngle 3.1415';
      }
      terrainString += '    xSpacing 1' +
                       '    zSpacing 1' +
                       '    solid FALSE' +
                       '    colorPerVertex TRUE' + 
                       '    color Color {' + 
                       '      color ' + lGridColor + 
                       '    }' +
                       '    height ' + lGridHeight +
                       '  }' +
                       '}';
      mfnode = new MFNode()	;
      mfnode = Browser.createVrmlFromString(terrainString) ;
      setchildren = mfnode;
      tGroup.children = mfnode;
    }
   "]
  }
  ROUTE expTimer.fraction_changed TO tGen.expFrac
ROUTE genTimer.fraction_changed	TO tGen.set_frac
}
PROTO ExplosionManager [
  eventOut SFBool  shotFinished
  eventIn  MFVec3f explosion
  eventOut MFVec3f expLocation
  eventOut SFVec2f  expRadius
  eventOut MFVec3f explosionOut
  field MFColor tankExpColors [1 0.6 0, 1 0.3 0, 1 0 0]
  field MFColor projExpColors [1 0.6 0, 1 0.3 0, 1 0 0]
  eventIn SFBool set_pbm
]
{
DEF tGroup Group {
  children [
    Group {
    }
    Group {
    }
    Group {
    }
  ]
}

DEF sc Script {
  field SFString expProto "
    PROTO Explosion [
      field SFInt32 expID 0
      field SFTime time  2
      field SFColor color 1 0.8 0
      field SFFloat radius 3
      field SFVec3f location 0 0 0 
      field SFFloat maxDamage 500
      eventOut MFVec3f expLocation
      eventOut SFVec2f expRadius 
      eventOut SFInt32 expEnd
      eventIn SFTime ss
      eventOut MFVec3f explosion 
    ]
    {
    DEF trans Transform {
      scale 0.01 0.01 0.01
      translation IS location
      children [
        DEF sh Shape {
          appearance Appearance {
            material Material {
              diffuseColor IS color
            }
          }
          geometry Sphere {
            radius IS radius
          }
        }
      ]
    }
    DEF ts TimeSensor {
      startTime IS ss
      cycleInterval IS time
    }
    DEF sc Script {
      field SFColor color IS color
      eventIn SFFloat timer
      eventIn SFBool isa
      field SFBool bool FALSE

      field SFFloat maxDamage IS maxDamage
      field SFNode ts USE ts
      field SFNode trans USE trans
      field SFInt32 expID IS expID
      field SFVec3f location IS location
      field SFFloat radius IS radius
      eventOut SFInt32 expEnd IS expEnd
      eventOut MFVec3f expLocation IS expLocation
      eventOut SFVec2f expRadius IS expRadius

      eventOut MFVec3f explosion IS explosion
      field SFBool damaged FALSE 
      directOutput TRUE
      url \"javascript:
        function initialize(){
        }
        function isa(bool,tm){                                                             
          ts.loop = FALSE;
          if(bool == FALSE){
            expEnd = expID;
            trans.scale = new SFVec3f(0.00001, 0.00001, 0.00001);
          } 
          else {
            explosion = new MFVec3f(location,new SFVec3f(Math.sin(Math.PI/2*0.5)*radius,0,0),new SFVec3f(color[0],color[1],color[2]));
          };
        };
        function timer(frac,tm){
          if(bool == FALSE){
            bool = TRUE;
            expLocation[0] = location;
            expLocation[1][0] = expID;
            expLocation[1][1] = radius;
            expLocation[1][2] = maxDamage;
          };
          scale = Math.sin(frac*Math.PI/2);
          trans.children[0].appearance.material.transparency = scale;
          scale += 0.000001;
          trans.scale = new SFVec3f(scale,scale,scale);
          expRadius = new SFVec2f(scale * radius,expID);
        }
      \"
    }
    ROUTE ts.isActive TO sc.isa
    ROUTE ts.fraction_changed TO sc.timer
    }"
  eventOut SFBool  shotFinished IS shotFinished
  eventIn  MFVec3f explosion IS explosion

  field SFInt32 currentExps 0
  field MFInt32 usedExp []
  eventIn MFVec3f expLocationIn
  eventIn SFVec2f expRadiusIn
  eventIn MFVec3f explosionIn
  eventOut MFVec3f explosionOut IS explosionOut 
  eventOut MFVec3f expLocation IS expLocation
  eventOut SFVec2f expRadius IS expRadius
  eventIn SFInt32 expEnd
  field SFNode tGroup USE tGroup
  directOutput TRUE
  field SFNode self USE sc
  field MFColor tankExpColors IS tankExpColors
  field MFColor projExpColors IS projExpColors
  field SFBool pbm TRUE
  eventIn SFBool set_pbm IS set_pbm

  url "javascript:
    function expEnd(int32,tm){
      usedExp[int32] = 0;
      currentExps -= 1;
      if(currentExps == 0){
        shotFinished = FALSE;
      };
      Browser.deleteRoute(tGroup.children[1].children[int32],'expEnd',self,'expEnd');
      Browser.deleteRoute(tGroup.children[1].children[int32],'expLocation',self,'expLocationIn');
      Browser.deleteRoute(tGroup.children[1].children[int32],'expRadius',self,'expRadiusIn');
    }
    function set_pbm(sfbool,tm){
      pbm = sfbool;
    }
    function explosionIn(mfvec3f,tm){
      explosionOut = mfvec3f ;
    }
    function expLocationIn(mfvec3f,tm){
      expLocation = mfvec3f;
    }
    function expRadiusIn(sfvec2f,tm){
      expRadius = sfvec2f;
    }
    function explosion(mfvec3f,tm){
      index = 0;
      while(usedExp[index] == 1){
        index++	;
      }
      for(a = 0 ; a < 3 ; a++){
        dif = mfvec3f[1][0]*0.1;
        rad = (mfvec3f[1][0]+dif-dif*a);
        string = expProto +
                 'Explosion {' + 
                 '  location ' + mfvec3f[0] + 
                 '  radius ' + rad + 
                 '  time ' + mfvec3f[1][1] + 
                 '  expID ' + index + 
                 '  maxDamage ' + mfvec3f[1][2] + 
                 '  color ';
        if(pbm){
          string += mfvec3f[3] + '}' ;
        }
        else{
          string += mfvec3f[2][0] == 1 ? tankExpColors[a] + '}' : projExpColors[a] + '}';
        }
        multi = new MFNode();
        multi = Browser.createVrmlFromString(string);
        tGroup.children[a].children[index] = multi[0];
        tGroup.children[a].children[index].ss = tm + a * 0.3;
      };
      Browser.addRoute(tGroup.children[1].children[index],'expEnd',self,'expEnd');
      Browser.addRoute(tGroup.children[1].children[index],'expLocation',self,'expLocationIn') ;
      Browser.addRoute(tGroup.children[1].children[index],'expRadius',self,'expRadiusIn') ;
      Browser.addRoute(tGroup.children[1].children[index],'explosion',self,'explosionIn');
      usedExp[index] = 1;
      currentExps++;
    }
  "
}
}
PROTO VariableEventGenerator [
  field SFString name "default"
  field SFVec3f location 0 0 0
  field SFVec3f scale 1 1 1  
  field SFBool continuous TRUE
  field SFVec2f span 0 10
  field SFFloat physL 10 
  field SFInt32 decPlaces 2
  field SFString type ""
  exposedField SFColor color 0.25 0.25 1
  eventIn SFTime output
  eventOut SFFloat SFFloatOut
  eventOut SFInt32 SFInt32Out
  eventOut SFBool SFBoolOut
  eventIn  SFFloat set_SFFloatOffset
  eventIn  SFInt32 set_SFInt32Offset
  eventIn  SFBool set_SFBoolOffset             
  field SFColor incColor 0 0.25 0.5
  field SFColor sliderColor 0.25 0.75 1
  eventIn SFColor set_AllColor
  field MFString intValStrings []
  field SFBool useStrings FALSE
  field SFInt32 idp 0           
]
{
Transform {
  scale IS scale           
  children [
    DEF trans Transform {   
      scale 1 0.6 1
      translation IS location           
      children [
        DEF ps PlaneSensor {
         maxPosition 10 0
        } 
        Shape {
          appearance Appearance {
            material DEF slidermat Material {
              diffuseColor 0 0 0
              emissiveColor IS sliderColor
            }
          }
          geometry Sphere {
          }
        }
      ]
    }
    DEF trans2 Transform {  
      translation IS location
      children [
        DEF disp Transform {
          scale 1.2 1.2 1.2
          children [
            Shape {
              appearance Appearance {
                material DEF textmat Material {
                  diffuseColor 0 0 0
                  emissiveColor IS color
                }
              }
              geometry Text {
                string "test"
                fontStyle FontStyle {
                  justify "MIDDLE"
                  family "SANS"
                  style "BOLD"
                }
              }
            }
          ]
        }
      ]
    }
    DEF	c1 Transform {
      scale 0.6 1 1
      rotation 0 0 1 1.5707
      children [
        DEF cone Shape {       
          appearance Appearance {
            material DEF conemat Material {
              diffuseColor 0 0 0
              emissiveColor IS incColor
            }
          }
          geometry Cone {
          }
        }
        DEF bwrd TouchSensor {
        }
      ]
    }
    DEF c2 Transform {
      scale 0.6 1 1
      rotation 0 0 1 -1.5707
      children [
        USE cone
        DEF fwrd TouchSensor {
        }
      ]
    }

  ]
}
DEF sc Script {
  field SFNode slidermat USE slidermat
  field SFNode conemat USE conemat
  field SFNode textmat USE textmat
  eventIn SFColor set_AllColor IS set_AllColor
  field MFString intValStrings IS intValStrings
  field SFBool useStrings IS useStrings
  field	SFInt32	idp IS idp
  field SFInt32 decPlaces IS decPlaces
  field SFInt32 dpVal 100
  field SFVec2f span IS span
  field SFFloat physL IS physL
  field SFNode c1 USE c1
  field SFNode c2 USE c2
  field SFNode disp USE disp
  field SFFloat fieldValue 0
  field SFNode ps USE ps
  field SFNode trans USE trans
  field SFVec3f location IS location
  field SFString name IS name
  eventIn SFTime fwrd
  eventIn SFTime bwrd
  eventIn SFVec3f value_changed
  eventIn SFTime output IS output                 
  eventOut SFFloat SFFloatOut IS SFFloatOut
  eventOut SFInt32 SFInt32Out IS SFInt32Out
  eventOut SFBool SFBoolOut IS SFBoolOut   
  eventIn  SFFloat set_SFFloatOffset IS set_SFFloatOffset
  eventIn  SFInt32 set_SFInt32Offset IS set_SFInt32Offset
  eventIn  SFBool set_SFBoolOffset IS set_SFBoolOffset
  field SFString type IS type
  field SFBool continuous IS continuous
  directOutput TRUE
  url "javascript:
    function initialize(){  
      decPlaces = decPlaces < 0 ? 0 : decPlaces;
	    idp = Math.pow(10,idp);
      dpVal = Math.pow(10,decPlaces) ;
      disp.translation = new SFVec3f(physL/2,1,0);
      c1.translation = location;
      c1.translation[0] = location[0]-3	;
      c2.translation = location	;
      c2.translation[0] = location[0]+physL+3;
      ps.minPosition = new SFVec2f(location[0],location[1]);
      ps.maxPosition = new SFVec2f(physL+location[0],location[1]) ;
      fieldValue = span[0] ;
      printValue() ;                     
      //disp.children[0].geometry.string[0] = name + ': ' + Math.round(fieldValue*dpVal)/dpVal 
    }
    function set_AllColor(sfcolor,tm){
      textmat.emissiveColor = sfcolor ;
      slidermat.emissiveColor = sfcolor;
      conemat.emissiveColor = sfcolor;
    }
    function fwrd(sftime,tm){ 
      val = (Math.floor(fieldValue*idp)+1)/idp;
      val = val < span[0] ? span[0] : val ;
      val = val > span[1] ? span[1] : val ; 
      val = type == 'SFBOOL' ? span[1] : val ;   
      set_SFFloatOffset(val,0);                 
    }
    function bwrd(sftime,tm){                  
      val = (Math.ceil(fieldValue*idp)-1)/idp ;
      val = val < span[0] ? span[0] : val;
      val = val > span[1] ? span[1] : val;
      val = type == 'SFBOOL' ? span[0] : val;    
      set_SFFloatOffset(val,0) ;            
    }
    function output(sftime,tm){  
      if(type == 'SFFLOAT'){
        SFFloatOut = Math.round(fieldValue*dpVal)/dpVal; 
      }
      if(type == 'SFINT32'){
        SFInt32Out = Math.round(fieldValue);
      }
      if(type == 'SFBOOL'){
        if(fieldValue >= (span[0]+span[1])/2){
          SFBoolOut = TRUE;
        }
        else{
          SFBoolOut = FALSE	;
        }
      }     

    }
    function value_changed(sfvec3f,tm){
      fieldValue = (sfvec3f[0]-location[0])/physL*(span[1]-span[0])+span[0];
      if(continuous){
        output(tm,tm);
      }
      printValue() ;
      //disp.children[0].geometry.string[0] = name + ': ' + Math.round(fieldValue*dpVal)/dpVal 
    }
    function printValue(){ 
      if(type == 'SFFLOAT'){
        a = Math.round(fieldValue*dpVal)/dpVal; 
      }
      if(type == 'SFINT32'){   
        a = Math.round(fieldValue) ;
        if(useStrings){
          a = intValStrings[a];
        }
      }
      if(type == 'SFBOOL'){
        if(fieldValue >= (span[1]+span[0])/2){
          a = 'TRUE';
        }
        else{
          a = 'FALSE';
        }
      }
      disp.children[0].geometry.string[0] = name + ': ' + a;
    }   
    function set_SFBoolOffset(sfbool,tm){      
      if(sfbool){                     
        set_SFFloatOffset(span[1],tm);
      }
      else{                        
        set_SFFloatOffset(span[0],tm);

      }
      if(continuous){
	      output(tm,tm)	;
      }
    }
    function set_SFInt32Offset(sfint32,tm){
      set_SFFloatOffset(sfint32,tm)	;
    }   
    function set_SFFloatOffset(sffloat,tm){
      if(sffloat <= span[1] && sffloat >= span[0]){
        fieldValue = sffloat ;
        sffloat = (sffloat-span[0])/(span[1]-span[0])*physL +location[0] ;
        trans.set_translation[0] = sffloat;
        ps.offset[0] = sffloat;
        printValue() ;
      }
      if(continuous && tm >= 0){
	      output(tm,tm)	 ;
      }
    }
  "
}
ROUTE fwrd.touchTime TO sc.fwrd
ROUTE bwrd.touchTime TO sc.bwrd
ROUTE ps.translation_changed TO sc.value_changed
ROUTE ps.translation_changed TO trans.set_translation
}

PROTO EventGenerator [
  field SFColor color 0.25 0.25 1
  field SFVec3f scale 1 1 1
  field SFVec3f location 0 0 0
  field MFString name "button"
  field SFInt32 numEvents 1

  field MFString type "SFINT32"

  field SFBool   SFBoolValue TRUE
  eventOut SFBool SFBoolOut 
  field SFColor  SFColorValue 0 0 0 
  eventOut SFColor SFColorOut
  field MFColor  MFColorValue []
  eventOut MFColor MFColorOut  
  field SFFloat  SFFloatValue 0
  eventOut SFFloat SFFloatOut
  field MFFloat  MFFloatValue []
  eventOut MFFloat MFFloatOut
  field SFImage SFImageValue 0 0 0 
  eventOut SFImage SFImageOut
  field SFInt32  SFInt32Value 0
  eventOut SFInt32 SFInt32Out 
  field MFInt32  MFInt32Value []
  eventOut MFInt32 MFInt32Out
  field SFNode SFNodeValue NULL
  eventOut SFNode SFNodeOut 
  field MFNode MFNodeValue []
  eventOut MFNode MFNodeOut
  field SFRotation SFRotationValue 0 0 1 0
  eventOut SFRotation SFRotationOut
  field MFRotation MFRotationValue []
  eventOut MFRotation MFRotationOut 
  field SFString SFStringValue ""
  eventOut SFString SFStringOut
  field MFString MFStringValue []
  eventOut MFString MFStringOut
  field SFTime SFTimeValue -1
  eventOut SFTime SFTimeOut
  field MFTime MFTimeValue []
  eventOut MFTime MFTimeOut 
  field SFVec2f SFVec2fValue 0 0 
  eventOut SFVec2f SFVec2fOut
  field MFVec2f MFVec2fValue []
  eventOut MFVec2f MFVec2fOut
  field SFVec3f SFVec3fValue 0 0 0
  eventOut SFVec3f SFVec3fOut
  field MFVec3f MFVec3fValue []
  eventOut MFVec3f MFVec3fOut
]
{
Transform {
  translation IS location
  scale IS scale
  children [
    Group {
      children [
        DEF ts TouchSensor {
        }
        Shape {
          appearance DEF defmat Appearance {
            material Material {
              emissiveColor IS color
              diffuseColor 0 0 0
            }
          }
          geometry Sphere {
          }
        }
      ]
    }
    Transform {
      translation 1.5 0 0
      children [
        Shape {
          appearance USE defmat
          geometry Text {
            fontStyle FontStyle {
              style "BOLD"
              family "SANS"
            }
            string IS name 
          }
        }
      ]
    }
  ]
}
DEF sc Script {
  eventIn SFTime tt
  field MFString type IS type
  field SFInt32 numEvents IS numEvents

  field SFBool   SFBoolValue IS SFBoolValue
  eventOut SFBool SFBoolOut IS SFBoolOut
  field SFColor  SFColorValue IS SFColorValue
  eventOut SFColor SFColorOut IS SFColorOut
  field MFColor  MFColorValue IS MFColorValue
  eventOut MFColor MFColorOut IS MFColorOut
  field SFFloat  SFFloatValue IS SFFloatValue
  eventOut SFFloat SFFloatOut IS SFFloatOut 
  field MFFloat  MFFloatValue IS MFFloatValue
  eventOut MFFloat MFFloatOut IS MFFloatOut
  field SFImage SFImageValue IS SFImageValue
  eventOut SFImage SFImageOut IS SFImageOut
  field SFInt32  SFInt32Value IS SFInt32Value
  eventOut SFInt32 SFInt32Out IS SFInt32Out
  field MFInt32  MFInt32Value IS MFInt32Value
  eventOut MFInt32 MFInt32Out IS MFInt32Out
  field SFNode SFNodeValue IS SFNodeValue
  eventOut SFNode SFNodeOut IS SFNodeOut
  field MFNode MFNodeValue IS MFNodeValue
  eventOut MFNode MFNodeOut IS MFNodeOut
  field SFRotation SFRotationValue IS SFRotationValue
  eventOut SFRotation SFRotationOut IS SFRotationOut 
  field MFRotation MFRotationValue IS MFRotationValue
  eventOut MFRotation MFRotationOut IS MFRotationOut
  field SFString SFStringValue IS SFStringValue
  eventOut SFString SFStringOut IS SFStringOut
  field MFString MFStringValue IS MFStringValue
  eventOut MFString MFStringOut IS MFStringOut
  field SFTime SFTimeValue IS SFTimeValue
  eventOut SFTime SFTimeOut IS SFTimeOut
  field MFTime MFTimeValue IS MFTimeValue
  eventOut MFTime MFTimeOut IS MFTimeOut
  field SFVec2f SFVec2fValue IS SFVec2fValue
  eventOut SFVec2f SFVec2fOut IS SFVec2fOut
  field MFVec2f MFVec2fValue IS MFVec2fValue
  eventOut MFVec2f MFVec2fOut IS MFVec2fOut
  field SFVec3f SFVec3fValue IS SFVec3fValue
  eventOut SFVec3f SFVec3fOut IS SFVec3fOut
  field MFVec3f MFVec3fValue IS MFVec3fValue
  eventOut MFVec3f MFVec3fOut IS MFVec3fOut
  url ["javascript:
    function tt(tm2,tm){
      for(a = 0;a < numEvents;a++){
        stype = type[a]	;
        if(stype == 'SFBOOL'){
          SFBoolOut = SFBoolValue;
        }						 
        if(stype == 'SFCOLOR'){
          SFColorOut = SFColorValue;
        }
        if(stype == 'MFCOLOR'){
          MFColorOut = MFColorValue;
        }
        if(stype == 'SFFLOAT'){
          SFFloatOut = SFFloatValue;
        }
        if(stype == 'MFFloat'){
          MFFloatOut = MFFloatValue;
        }
        if(stype == 'SFIMAGE'){
          SFImageOut = SFImageValue;
        }
        if(stype == 'SFINT32'){
          SFInt32Out = SFInt32Value;
        }
        if(stype == 'MFINT32'){
          MFInt32Out = MFInt32Value;
        }
        if(stype == 'SFNODE'){
          SFNodeOut = SFNodeValue;
        }
        if(stype == 'MFNODE'){
          MFNodeOut = MFNodeValue;
        }
        if(stype == 'SFROTATION'){
          SFRotationOut = SFRotationValue;
        }
        if(stype == 'MFROTATION'){
          MFRotationOut = MFRotationValue;
        }
        if(stype == 'SFSTRING'){
          SFStringOut = SFStringValue;
        }
        if(stype == 'MFSTRING'){
          MFStringOut = MFStringValue;
        }
        if(stype == 'SFTIME'){
          SFTimeOut = SFTimeValue ;
        }
        if(stype == 'MFTIME'){
          MFTimeOut = MFTimeValue;
        }
        if(stype == 'SFVEC2F'){
          SFVec2fOut = SFVec2fValue;
        }
        if(stype == 'MFVEC2F'){
          MFVec2fOut = MFVec2fValue	;
        }
        if(stype == 'SFVEC3F'){
          SFVec3fOut = SFVec3fValue;
        }
        if(stype == 'MFVEC3F'){
          MFVec3fOut = MFVec3fValue;
        }
      }
    }
  "]
}
ROUTE ts.touchTime TO sc.tt
}
PROTO Projectile [    
  eventOut SFRotation trackOrientation
  eventOut SFVec3f trackLocation       
  eventIn  SFVec3f set_gridSize
  eventIn  MFVec3f set_fire_order
  eventIn  SFFloat collisionHeight
  eventIn  SFBool  shotFinished
  eventOut SFVec3f projectileLocation
  eventOut MFVec3f explosion

  eventIn  SFTime  calibrateInterface
  eventIn  SFFloat set_gravity
  eventOut SFFloat calibrate_gravity

  field SFFloat projr 0.12
  field SFColor projColor 1 0 0  
  field SFFloat gravity 9.8
  field SFFloat expr 5
  field SFFloat expt 2
  field SFFloat expDam 500 
  field SFBool plotLines FALSE
  eventIn SFBool set_plotLines
  eventOut SFBool calibrate_plotLines    
  field SFBool wind TRUE
  field SFFloat strength 2.5  
  eventIn SFBool isVisible
  field SFFloat pcChange 5
  eventIn SFBool regen
  eventIn SFFloat set_pcChange
  eventIn SFFloat set_Strength
  eventIn SFBool set_wind
  eventOut SFFloat calibrate_pcChanged
  eventOut SFFloat calibrate_Strength
  eventOut SFBool calibrate_Wind
  exposedField SFTime animtm 2 
  eventOut SFBool visibleOut
  field SFBool bindable FALSE
  eventIn SFBool set_bind
  eventOut SFBool calibrate_bind
  eventIn SFBool set_pbm
  field SFFloat animScale 1
  eventIn SFFloat set_animScale
  eventOut SFFloat calibrate_animScale
]
{  
Group {
  children [   
    DEF tracker Viewpoint {
    }    
    DEF sWind Switch {
      choice [
        DEF tWind Transform {    
          children [
            Shape {
              appearance Appearance {
                material Material {
                  diffuseColor 0.5 0.5 1
                  transparency 0.5
                }
              }
              geometry Extrusion {   
                crossSection [-1 -1,-1 1,1 1,1 -1,-1 -1]
                spine [0 0 -0.5,0 0 0.2,0 0 0.2,0 0 0.5]
                scale [0.6 1,0.6 1,1 1,0 1]
              }
            }
          ]
        }
      ]
    }         
    DEF sGroup Switch {
      choice [
        Group {
          children [    
            DEF plots Switch {
              choice [
                Group {
                  children [
                    DEF xGroup Transform {
                      children [
                        Shape {
                          appearance Appearance {
                            material Material {
                              emissiveColor 1 1 1
                            }
                          }
                          geometry IndexedLineSet {
                            coord Coordinate {
                            }
                          }
                        }
                      ]
                    }                 
                    DEF yGroup Transform {
                      children [
                        Shape {
                          appearance Appearance {
                            material Material {
                              emissiveColor 1 1 1
                            }
                          }
                          geometry IndexedLineSet {
                            coord Coordinate {
                            }
                          }
                        }
                      ]
                    }
                    DEF zGroup Transform {
                      children [
                        Shape {
                          appearance Appearance {
                            material Material {
                              emissiveColor 1 1 1
                            }
                          }
                          geometry IndexedLineSet {
                            coord Coordinate {
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
            DEF tGroup Transform {
              children [   
                DEF t Shape {
                  appearance Appearance {
                    material Material {
                      diffuseColor IS projColor
                    }
                  }
                  geometry Sphere {
                    radius IS projr
                  }
                }
              ]  
            }
          ]
        }
      ]
    }  
  ]
}
DEF varyTimer TimeSensor {
  cycleInterval IS animtm
}
DEF ts TimeSensor {
  enabled FALSE
  loop TRUE
  cycleInterval 360
}
DEF sc Script {    
  field SFFloat animScale IS animScale
  eventIn SFFloat set_animScale IS set_animScale
  eventOut SFFloat calibrate_animScale IS calibrate_animScale
  field SFColor projColor IS projColor
  field SFNode t USE t
  eventIn SFBool set_pbm IS set_pbm
  field	SFBool pbm FALSE
  field SFVec3f expColor 0 0 0

  field SFBool bindable IS bindable
  eventIn SFBool set_bind IS set_bind
  eventOut SFBool calibrate_bind IS calibrate_bind
  field SFNode tracker USE tracker
  eventOut SFBool visibleOut IS visibleOut          

  field SFVec2f change 0 0
  eventIn SFFloat windFrac 
  field SFNode varyTimer USE varyTimer        
  field SFNode sWind USE sWind
  field SFNode tWind USE tWind
  eventIn SFBool isVisible IS isVisible
  eventIn SFBool regen IS regen
  field SFFloat pcChange IS pcChange
  field SFBool wind IS wind
  field SFFloat strength IS strength      
  eventIn SFFloat set_pcChange IS set_pcChange
  eventIn SFFloat set_Strength IS set_Strength
  eventIn SFBool set_wind IS set_wind   
  eventOut SFFloat calibrate_pcChanged IS calibrate_pcChanged
  eventOut SFFloat calibrate_Strength IS calibrate_Strength
  eventOut SFBool calibrate_Wind IS calibrate_Wind
  field SFFloat wAngle 0
  field SFFloat intensity 0
  field SFNode plots USE plots
  field SFBool plotLines IS plotLines
  eventIn SFBool set_plotLines IS set_plotLines
  eventOut SFBool calibrate_plotLines IS calibrate_plotLines  
  eventIn SFFloat tmIn
  field SFNode xGroup USE xGroup  
  field SFNode yGroup USE yGroup 
  field SFNode zGroup USE zGroup       
                              
  directOutput TRUE
  field SFNode ts USE ts
  field SFNode sGroup USE sGroup 
  field SFNode tGroup USE tGroup
  eventOut SFVec3f trackLocation IS trackLocation
  eventOut SFRotation trackOrientation IS trackOrientation

  eventIn SFVec3f set_gridSize IS set_gridSize
  eventIn  MFVec3f set_fire_order IS set_fire_order
  eventIn  SFFloat collisionHeight IS collisionHeight
  eventIn  SFBool  shotFinished IS shotFinished
  eventOut SFVec3f projectileLocation IS projectileLocation
  eventOut MFVec3f explosion IS explosion

  eventIn  SFTime  calibrateInterface IS calibrateInterface
  eventIn  SFFloat set_gravity IS set_gravity
  eventOut SFFloat calibrate_gravity IS calibrate_gravity

  field SFFloat gravity IS gravity
  field SFFloat expr IS expr
  field SFFloat expt IS expt
  field SFFloat expDam IS expDam

  field SFTime starttime 0
  field SFVec3f muzzleLoc 0 0 0
  field SFFloat xdpersec 0 
  field SFFloat ydpersec 0 
  field SFFloat zdpersec 0 

  field SFFloat xgrav 0
  field SFFloat zgrav 0
  field SFInt32 xd 0
  field SFInt32 zd 0
  field SFFloat maxHeight 0
  field SFBool show FALSE
  field SFFloat fac 2
  url "javascript:
    function set_pbm(sfbool,tm){
	    pbm = sfbool;
    }
    function windFrac(sffloat,tm){
      tWind.rotation = new SFRotation(0,1,0,wAngle-(1-sffloat)*change[1]);
      tWind.scale[0] = (intensity-(1-sffloat)*change[0])/(strength*2);   
      tWind.scale[0] *= zd > xd ? xd/2 : zd/2;
//      tWind.rotation = new SFRotation(0,1,0,wAngle-Math.cos(sffloat)*change[1])
//      tWind.scale[0] = intensity-Math.cos(sffloat*Math.PI/2)*change[0] 
    }
    function set_animScale(sffloat,tm){
      animScale = sffloat;
    }
    function isVisible(sfbool,tm){ 
      sWind.whichChoice = -1;  
      if(wind && show){
        sWind.whichChoice = sfbool ? 0 : -1;
        visibleOut = sfbool;
      }
    }
    function regen(sfbool,tm){
      show = sfbool;
      sWind.whichChoice = -1;
      if(wind && show){
        sWind.whichChoice = sfbool ? 0 : -1;
        visibleOut = sfbool;
      }
      generateWind();
    }
    function initialize(){
      calibrate_bind = bindable;
      calibrate_Wind = wind;
      calibrate_gravity = gravity;
      calibrate_animScale = animScale*10;
      plots.whichChoice = plotLines ? 0 : -1 ;
      set_Strength(strength,0);
    }
    function set_gridSize(sfvec3f,tm){
      xd = sfvec3f[0] ;
      zd = sfvec3f[1] ;
      maxHeight = sfvec3f[2];	
      xGroup.children[0].geometry.coord.point = new MFVec3f(new SFVec3f(0,0,0),new SFVec3f(xd,0,0));
      xGroup.children[0].geometry.set_coordIndex = new MFInt32(0,1);
      yGroup.children[0].geometry.coord.point = new MFVec3f(new SFVec3f(0,0,0),new SFVec3f(0,maxHeight,0));
      yGroup.children[0].geometry.set_coordIndex = new MFInt32(0,1);
      zGroup.children[0].geometry.coord.point = new MFVec3f(new SFVec3f(0,0,0),new SFVec3f(0,0,zd));
      zGroup.children[0].geometry.set_coordIndex = new MFInt32(0,1);
      tWind.translation = new SFVec3f(xd/2,maxHeight*3/4,zd/2);
      tWind.scale = zd > xd ? new SFVec3f(1,1,xd/2):new SFVec3f(1,1,zd/2);
    }
    function tmIn(tm1,tm){ 
      animtm = (tm - starttime)*fac;

      //locate projectile relative to tank barrel
      tempGrav = wind ? xgrav : 0 ;
      tGroup.translation[0] = xdpersec * animtm - (tempGrav * (animtm * animtm));
      tGroup.translation[1] = ydpersec * animtm - (gravity * (animtm* animtm)) ;
      tempGrav = wind ? zgrav : 0 ;
      tGroup.translation[2] = zdpersec * animtm - (tempGrav * (animtm * animtm)) ;
      
      //offset projectile to world coordinates
      tGroup.translation[0] += muzzleLoc[0];
      tGroup.translation[1] += muzzleLoc[1];
      tGroup.translation[2] += muzzleLoc[2];     
      xGroup.translation = tGroup.translation;
      xGroup.translation[0] = 0	;
      yGroup.children[0].geometry.coord.point[1][1] = tGroup.translation[1] > maxHeight ? tGroup.translation[1] : maxHeight;
      yGroup.translation = tGroup.translation ;
      yGroup.translation[1] = 0	;
      zGroup.translation = tGroup.translation ;
      zGroup.translation[2] = 0 ;       
      angle = Math.asin(xdpersec/Math.sqrt(xdpersec*xdpersec+zdpersec*zdpersec));
      angle += zdpersec < 0 ? Math.PI : 0  ;
      angle *= zdpersec < 0 ? -1 : 1 ;    
      trackOrientation = new SFRotation(0,1,0,-3.1415+angle) ;
      trackLocation = tGroup.translation;
//      trackLocation[1] += 10
      trackLocation[0] -= xdpersec/5 ;
      trackLocation[2] -= zdpersec/5 ;   
      projectileLocation = tGroup.translation;
      tracker.orientation =   trackOrientation ;
      tracker.position = trackLocation ;
    }
    function generateWind(){   
      intensity = strength ;
      wAngle = Math.random()*Math.PI*2;
      tWind.rotation = new SFRotation(0,1,0,wAngle)	;
      tWind.scale[0] = intensity/(strength*2)  ;
      tWind.scale[0] *= zd > xd ? xd/2 : zd/2  ;
      zgrav = Math.cos(wAngle)*-1*intensity	;
      xgrav = Math.sin(wAngle)*-1*intensity ;    
    }										
    function set_fire_order(mfvec3f,tm){
      if(animScale <= 0){
        fr = Browser.getCurrentFrameRate() ; 
        fac = 1	;
        if(fr != 0){
          if(fr > mfvec3f[2][0]){
            fac = 1;
          }
          else{
            fr = mfvec3f[2][0]/fr;  
           fac = 1/fr;   
          }
        }
      }
      else{
        fac = animScale;
      }
      tracker.set_bind = bindable;
      sGroup.whichChoice = 0  ;
      ts.startTime = tm	 ;;
      ts.enabled = TRUE;
      starttime = tm  ;

      barrelStartLoc = mfvec3f[0] ;
      muzzleLoc = mfvec3f[1]  ;
      tGroup.translation = mfvec3f[1] ;
      muzzleVel = mfvec3f[2][0];
      xd4barrel = muzzleLoc[0] - barrelStartLoc[0];
      zd4barrel = muzzleLoc[2] - barrelStartLoc[2] ; 
      yd4barrel = muzzleLoc[1] - barrelStartLoc[1] ; 
      barrelLength = Math.sqrt(xd4barrel*xd4barrel + yd4barrel*yd4barrel + zd4barrel*zd4barrel);
      upersec = muzzleVel/barrelLength	;
      zdpersec = zd4barrel * upersec ;
      xdpersec = xd4barrel * upersec;
      ydpersec = yd4barrel * upersec ;          
      expColor = mfvec3f[3]	 ;
	  t.appearance.material.diffuseColor = pbm ? new SFColor(mfvec3f[3][0],mfvec3f[3][1],mfvec3f[3][2]) : projColor	;
    }
    function collisionHeight(sffloat,tm){
      //tGroup.translation[1] = sffloat
      explosion[0] = tGroup.translation;
      explosion[1][0] = expr   ;
      explosion[1][1] = expt   ;
      explosion[1][2] = expDam ;
      explosion[2][0] = 0	 ;
      explosion[3] = expColor ;
      ts.stopTime = tm		 ;
      tracker.set_bind = FALSE ;
      sGroup.whichChoice = -1 ;
      vary(tm) ;
    }
    function vary(tm){  
      tWind.rotation = new SFRotation(0,1,0,wAngle);
      tWind.scale[0] = intensity/(strength*2) ;
      tWind.scale[0] *= zd > xd ? xd/2 : zd/2 ;
      varyTimer.startTime = tm ;    
      rand = Math.random()*pcChange/100*strength*2 ;         
      oldI = intensity	;
      intensity = Math.random() > 0.5 ? intensity + rand : intensity - rand ;  
      intensity = intensity > strength * 2 ? strength * 2 : intensity ;
      intensity = intensity < 0.01 ? 0.01 : intensity  ;
      change[0] = intensity - oldI ;
      oldA = wAngle;
      rand = Math.random()*pcChange/50*Math.PI;	  
      wAngle = Math.random() > 0.5 ? wAngle + rand : wAngle - rand ;
//      tWind.rotation = new SFRotation(0,1,0,wAngle)
//      tWind.scale[0] = intensity
      change[1] = wAngle - oldA ;   
      zgrav = Math.cos(wAngle)*-1*intensity;
      xgrav = Math.sin(wAngle)*-1*intensity;        
                 
    }
    function shotFinished(sfbool,tm){
      ts.enabled = FALSE  ;
      ts.stopTime = tm ;
      tracker.set_bind = FALSE;
      sGroup.whichChoice = -1 ;
      vary(tm) ;
    }
    function calibrateInterface(sftime,tm){
      calibrate_gravity = gravity ;
      calibrate_plotLines = plotLines ;
      calibrate_Wind = wind	  ;
      calibrate_pcChanged = pcChange ;
      calibrate_Strength = strength	;
      calibrate_bind = bindable	;
      calibrate_animScale = animScale  ;
    }                      
    function set_bind(sfbool,tm){
      bindable = sfbool; 
    }
    function set_wind(sfbool,tm){
      wind = sfbool	 ;
      calibrate_Wind = wind	;
    }
    function set_pcChange(sffloat,tm){
      pcChange = sffloat  ;
    }
    function set_Strength(sffloat,tm){
      if(sffloat > 0){
        strength = sffloat;
        set_wind(TRUE,tm) ;
      }
      else{
        set_wind(FALSE,tm) ;     
      }
    }
    function set_plotLines(sfbool,tm){
      plotLines = sfbool;
      plots.whichChoice = plotLines ? 0 : -1;
    }
    function set_gravity(sffloat,tm){
      gravity = sffloat;
      calibrate_gravity = gravity;
    }
  "
} 
ROUTE varyTimer.fraction_changed TO sc.windFrac
ROUTE ts.fraction_changed TO sc.tmIn
}
 
DEF dts TimeSensor {
  cycleInterval 10
  loop TRUE
}
DEF sts Script {
  eventIn SFFloat frac
  url "javascript:
    function frac(sffloat,tm){

    }
  "
}
ROUTE dts.fraction_changed TO sts.frac
DEF viewG Group {
}     
DEF viewS Script {
  eventIn MFNode views
  directOutput TRUE
  field SFNode viewG USE viewG
  url "javascript:
    function views(mfnode,tm){
      viewG.children = mfnode;
      viewG.children[0].set_bind = TRUE	;
    }
  "
}                          
Background { 
  skyColor [ 
    0.96 1.00 1.00
    0.80 0.91 1.00
    0.67 0.76 0.85
    0.56 0.64 0.71
  ] 
  skyAngle [ 1.571 1.658 1.745 ] 
} 

NavigationInfo {
  headlight FALSE
  type ["EXAMINE" "ANY"]
}                                 
Group {
  children	[
    Transform {  
	    children	[
	      DEF prox ProximitySensor {
	        center	0 0 0
	        size	999999 999999 999999
	      }
	      DEF xform Transform {
	        children [
              DEF scale Transform {
                scale 1 1 1  
                children [     
                Transform {              
                  scale .05 .05 .005
                  translation -.8 .3 -1 #-0.8 0.3 -1
                  children [   
                    Transform {
                      translation -3 0.5 0
                      children [ 
                        DEF vs VisibilitySensor {
                  			size .1,.1,.1
                        }
                      ]
                    }       
                    DEF HUDs Switch {
                      choice [
                        #group 0
                        Group {
                          children [
                            EventCapture {
                              name "welcome to..."
                              location 15 1 0
                              justify "MIDDLE"
                            }
                            EventCapture {
                              name "TNAKGAME:"
                              location 15 -2 0
                              scale 1.5 1.5 1.5
                              justify "MIDDLE"  
                              color 1 0 0
                            }
                            EventCapture {
                              name "Total Abomination"
                              location 15 -3 0
                              scale 1.5 1.5 1.5
                              justify "MIDDLE"
                              color 1 0 0
                            }
                            EventCapture {
                              name "please make a selection"
                              location 15 -7 0
                              justify "MIDDLE"
                            }
                            DEF options EventGenerator {
                              type "SFINT32"
                              name "Options"   
                              SFInt32Value 2   
                              location 13 -9 0  
                            }
                            DEF gen EventGenerator {
                              type ["SFBOOL"  
                                    "SFINT32"]
                              numEvents 2
                              SFInt32Value 9 
                              location 12.75 -11 0
                              name "Generate"
                              SFBoolValue TRUE    
                            }   
    #                        DEF credits EventGenerator {
    #                          type "SFINT32"
    #                          SFInt32Value 6
    #                          location 13 -13 0
    #                          name "Credits"
    #                        }
                          ]
                        }
                        #group 1
                        Group {
                          children [
                            DEF main EventGenerator {
                              type ["SFBOOL"
                                    "SFTIME"
                                    "SFINT32"]
                              SFBoolValue FALSE
                              SFInt32Value 0
                              numEvents 3
                              name "Main Menu"
                              location 28 0 0        
                            }
                            DEF regen EventGenerator {
                              type ["SFBOOL"
                                   "SFINT23"]  
                              name "Regen"
                              numEvents 2
                              SFInt32Value 9
                              SFBoolValue TRUE
                              location -1.5 -2 0
                            }
                            DEF plctnks EventGenerator {
                              type ["SFTIME"
                                    "SFINT32"
                                    "SFBOOL"]
                              name "Play"
                              SFBoolValue TRUE
                              numEvents 3
                              SFInt32Value 3
                              SFTimeValue 1 
                              location -1.5 -4 0    
                            }         
                            DEF play VariableEventGenerator {
                              location 2 0 0 
                              name "# Players"
                              continuous TRUE
                              physL 4
                              type "SFINT32"
                              span 2 4
                            }       
                            DEF numP Script {
                              eventIn SFInt32 players
                              eventOut MFInt32 tanks
                              eventIn MFInt32 c_tanks
                              eventOut SFInt32 c_players
                              url "javascript:
                              function c_tanks(mfint32){
                                ts = 0;
                                for(a = 0 ; a < 4 ; a++){
                                  ts += mfint32[a] == 1 ? 1 : 0; 
                                } 
                                c_players = ts;   
                              }
                              function players(sfint32){
                                if(sfint32 == 2){
                                  tanks = new MFInt32(1,1,0,0) ;
                                }
                                else{
                                  if(sfint32 == 3){
                                    tanks = new MFInt32(1,1,1,0);
                                  }
                                  else{
                                    if(sfint32 == 4){
                                      tanks = new MFInt32(1,1,1,1);
                                    }
                                  }
                                }   
                              }

                              "
                            }    
                          ]
                        }
                        #group 2
                        Group {
                         children [
                            #insert options screen
                            USE main
                            DEF tOptions EventGenerator {
                              name "Terrain Options" 
                              type ["SFINT32"
                                    "SFTIME"]
                              SFInt32Value 7
                              numEvents 2
                              location -1.5 0 0
                            }
                            DEF gOptions EventGenerator {
                              name "Game Options"   
                              type ["SFINT32"
                                    "SFTIME"]
                              numEvents 2
                              SFInt32Value 8
                              location -1.5 -2 0
                            }
                          ]
                        }
                        #group 3
                        Group {        
                          children [    
                            #insert in game screen
                            USE main 
                            DEF sTimer Switch {
                              choice [
                                DEF timer EventCapture {
                                  name "Timer"
                                  location 12 -0.5 0 
                                }     
                              ]
                            } 
                            DEF sWind Switch {
                              choice [
                                DEF showWind VariableEventGenerator {
                                  location 1.5 -13 0  
                                  span 0 10          
                                  name "show Wind"
                                  physL 0.5
                                  type "SFBOOL"
                                  scale 0.8 0.8 0.8
                                }
                              ]
                            }
                            DEF setPBind VariableEventGenerator {
                              location 1.5 -16 0
                              span 0 10         
                              name "Proj Bind"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8   
                            } 
                            DEF healths EventCapture { 
                              name "healths"                                          
                              location 12 1 0    
                            }
                            DEF vertAngle VariableEventGenerator {
                              location 0 1 0
                              type "SFFLOAT"
                              name "Vertical Angle" 
                              physL 4
                              span 0 90
                              scale 0.8 0.8 0.8 
                            }
                            DEF horAngle VariableEventGenerator {
                              type "SFFLOAT"
                              name "Horizontal Angle"
                              physL 4
                              span -180 180
                              location 0 -3 0
                              scale 0.8 0.8 0.8 
                            }
                            DEF vel VariableEventGenerator {
                              type "SFFLOAT"
                              name "Velocity"
                              physL 4
                              span 0 50
                              location 0 -7 0
                              scale 0.8 0.8 0.8  
                            }
                            DEF fire EventGenerator {
                              name "Fire"
                              type ["SFTIME"
                                    "SFINT32"]
                              numEvents 2
                              SFInt32Value 4
                              location 0 -7.5 0  
                            }
                            DEF angleScript Script {
                              directOutput TRUE			
                              field SFNode horAngleNode USE	horAngle
                              field SFNode vertAngleNode USE vertAngle
                              field SFNode velNode USE vel
                              field MFRotation angles []
                              eventOut MFRotation set_angles
                              eventIn SFFloat vertAngle 
                              eventIn SFFloat horAngle
                              eventIn SFFloat vel
                              eventIn MFRotation calibrate_angles
                              url "javascript:
                                function calibrate_angles(mfrotation, tm){
                                  color = new SFColor(mfrotation[2][1],mfrotation[2][2],mfrotation[2][3]);
                                  horAngleNode.set_AllColor = color;
                                  vertAngleNode.set_AllColor = color;
                                  velNode.set_AllColor = color;
                                  horAngleNode.set_SFFloatOffset = -1*mfrotation[0][3]*180/Math.PI;
                                  vertAngleNode.set_SFFloatOffset = mfrotation[1][3]*180/Math.PI ;
                                  velNode.set_SFFloatOffset = mfrotation[2][0];
                                  angles = new MFRotation(new SFRotation(0,1,0,mfrotation[0][3]),new SFRotation(1,0,0,mfrotation[1][3]),new SFRotation(mfrotation[2][0],0,0,0));
                                }
                                function vertAngle(sffloat,tm) {
                                  angle = sffloat*Math.PI/180;
                                  angles[1] = new SFRotation(1,0,0,angle) ;
                                  set_angles = angles	;
                                }
                                function horAngle(sffloat,tm) {
                                  angle = sffloat*Math.PI/180;
                                  angles[0] = new SFRotation(0,1,0,angle);
                                  set_angles = angles ;
                                }
                                function vel(sffloat,tm){
                                  angles[2] = new SFRotation(sffloat,0,0,0)	;
                                  set_angles = angles ;
                                }
                              "
                            }
                          ]
                        }
                        #group 4
                        Group {
                          children [
                            USE healths
                            DEF dead EventCapture {
                              name "" 
                              colon FALSE
                              location -1.5 0 0 
                            }        
                            #hud info for during shot firing (projectile animation/explosions)
                            #health bars..
                          ]
                        }
                        #group 5
                        Group {
                          children [
                            DEF restart EventGenerator {
                              type ["SFBOOL"
                                    "SFTIME"
                                    "SFINT32"]
                              SFBoolValue FALSE
                              SFInt32Value 0
                              numEvents 3
                              name "Play Again"
                              location -1.5 0 0        
                            }
                            DEF woncap EventCapture {
                              location 0 -2 0
                              name ""
                              colon FALSE      
                            }  
                          ]
                        }
                        #group 6
                        Group {
                          children [
                            USE main 
                            #Inline {
                            #  url "credits.wrl"
                            #}  
                            DEF fg Fog {
					                    color 0.67 0.76 0.85
                              visibilityRange 50
                              fogType "EXPONENTIAL"
                            }  
                            DEF credTimer TimeSensor {
                              loop TRUE     
                            }
                            Transform {
                              translation 10 -5 -100
                              children [  

                              ]
                            }
                          ]
                        }
                        #group 7
                        Group {
                          children [
                            USE main
                            DEF tSave EventGenerator {   
                              name ["Save" "Settings"]
                              location 28 -2 0
                              type "SFTIME"
                            }
                            #insert terrain options
                            DEF setxd VariableEventGenerator {
                              location 2 0 0
                              type "SFINT32"  
                              name "X Grid Size"
                              physL 4
                              span 12 100
                              continuous FALSE
                              scale 0.8 0.8 0.8        
                            }    
                            DEF setzd VariableEventGenerator {
                              type "SFINT32"
                              location 2 -4 0 
                              name "Z Grid Size"
                              physL 4
                              span 12 100
                              continuous FALSE
                              scale 0.8 0.8 0.8       
                            }    
                            DEF setMaxH VariableEventGenerator {
                              location 2 -8 0 
                              span 1 100
                              continuous FALSE  
                              name "Max Height"
                              physL 4
                              type "SFFLOAT"
                              scale 0.8 0.8 0.8    
                            }    
                            DEF setShade VariableEventGenerator {
                              location 17 0 0  
                              span 0 10
                              continuous FALSE   
                              name "Smooth Shading"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8      
                            }
                            DEF setAnimGen VariableEventGenerator {
                              location 17 -4 0 
                              span 0 10
                              continuous FALSE  
                              name "Animated Generation"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8     
                            }
                            DEF setFadeWhite VariableEventGenerator {
                              location 17 -8 0 
                              span 0 10
                              continuous FALSE  
                              name "Fade White Terrain"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8   
                            }
                            DEF setPaintBall VariableEventGenerator {
                              location 17 -12 0 
                              span 0 10
                              continuous FALSE  
                              name "PaintBall Mode"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8    
                            }
                            DEF setTerrainD VariableEventGenerator {
                              location 17 -16 0 
                              span 0 10
                              continuous FALSE  
                              name "Terrain Damage"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8      
                            }
                            DEF setBaseColor VariableEventGenerator {
                              location 2 -16 0 
                              span 0 2
                              continuous FALSE  
                              name "Base Terrain Color"
                              physL 4
                              type "SFINT32"
                              scale 0.8 0.8 0.8  
                              useStrings TRUE      
                              intValStrings ["RED""GREEN""BLUE"]
                            }
                            DEF setSmooth VariableEventGenerator {
                              location 2 -12 0
                              type "SFINT32"   
                              name "Smooth"
                              physL 4
                              span 0 100
                              continuous FALSE
                              scale 0.8 0.8 0.8      
                            }    
                            DEF setGos VariableEventGenerator {
                              location 29 -16 0 
                              span 0 10
                              continuous FALSE  
                              name "Gosford Marker"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8      
                            }   
                          ]
                        }
                        #group 8
                        Group {
                          children [
                            USE main
                            DEF gSave EventGenerator {   
                              name ["Save" "Settings"]
                              location 28 -2 0
                              type "SFTIME"
                            }
                            #insert game options   
                            DEF setGravity VariableEventGenerator {
                              location 2 -4 0 
                              span 0.1 50
                              continuous FALSE  
                              name "Gravity"
                              physL 4
                              type "SFFLOAT"
                              scale 0.8 0.8 0.8     
                            }   
                            DEF setTimer VariableEventGenerator {
                              location 2 0 0 
                              span 0 300
                              continuous FALSE  
                              name "Shot Timer"
                              physL 4
                              type "SFFLOAT"
                              scale 0.8 0.8 0.8     
                            }   
                            DEF setPlotLines VariableEventGenerator {
                              location 17 -4 0
                              span 0 10
                              continuous FALSE  
                              name "Plot Lines"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8       
                            }  
                            DEF setPassShot VariableEventGenerator {
                              location 17 0 0
                              span 0 10
                              continuous FALSE  
                              name "Pass Shot"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8     
                            } 
                            DEF setIntensity VariableEventGenerator {
                              location 2 -8 0 
                              span 0 30
                              continuous FALSE  
                              name "Start Wind Intensity"
                              physL 4
                              type "SFFLOAT"
                              scale 0.8 0.8 0.8    
                            }
                            DEF setChange VariableEventGenerator {
                              location 2 -12 0 
                              span 0 100
                              continuous FALSE  
                              name "% Wind Variation"
                              physL 4
                              type "SFFLOAT"
                              scale 0.8 0.8 0.8    
                            }       
                            DEF setTBind VariableEventGenerator {
                              location 17 -8 0
                              span 0 10
                              continuous FALSE  
                              name "Tank Bind"
                              physL 0.5
                              type "SFBOOL"
                              scale 0.8 0.8 0.8      
                            }    
                            DEF setAnim VariableEventGenerator {
                              location 2 -16 0 
                              span 0 2
                              decPlaces 1
                              continuous FALSE  
                              name "Proj Time Scale"
                              physL 4
                              type "SFFLOAT"
                              scale 0.8 0.8 0.8    
						                  idp 1
                            }
                          ]
                        }
                        #group 9
						            Group {
                          children [   
                            DEF gener EventCapture {
                              location 5 -5 0
                              name "Generating Terrain..."
                            }
                          ]
						            }
                      ]
                    }
                  ]
                }
              ]
            }
		      ]
	      }
	    ]
    }
    Group {
      children [
        Group {
          children [
            DirectionalLight {
              direction -.3 -1 -.3 
            }
            DEF exp ExplosionManager {
            }
            DEF tm TankManager {   
            },
            DEF ter Terrain {  
            },
            DEF proj Projectile {
            }
          ]
        }
      ]
    }
  ]
}
DEF genScript Script {
  directOutput TRUE
  field SFNode HUDs USE HUDs
  eventIn SFTime genDone 
  eventOut SFInt32 HUDInd
  url "javascript:
  function genDone(sftime,tm){
    if(HUDs.whichChoice == 9 ){
      HUDInd = 1 ;
    }
  }
  "
}
ROUTE ter.genDone TO genScript.genDone
ROUTE genScript.HUDInd TO HUDs.whichChoice
DEF inttimer TimeSensor {
  cycleInterval 100
  loop TRUE   
}        
DEF calS Script {
  eventIn SFBool visi
  eventIn SFFloat time
  field SFNode scale USE scale
  directOutput TRUE
  field SFNode timer USE inttimer
  field SFFloat inc 0.001
  url "javascript:
  function visi(sfbool,tm){
    if(sfbool){ 
      if( inc == 0.001){
        timer.stopTime = tm; 
      } 
      else{
        inc = -0.001 ;
      }         
    }  
    else{
      inc = 0.001;
    }
  }
  function time(sffloat,tm){
    scale.scale[0] -= inc ;
  }
  "
} 
ROUTE inttimer.fraction_changed TO calS.time     
ROUTE vs.isActive TO calS.visi 
DEF credS Script {
  eventIn SFInt32 sethud
  directOutput TRUE
  eventIn SFInt32 main
  field SFNode fg USE fg
  url "javascript:
    function sethud(sfint32,tm){
      fg.set_bind = TRUE ;
    }
    function main(sfint32,tm){
      fg.set_bind = FALSE ;
    }
  "
}
#ROUTE credits.SFInt32Out TO credS.sethud
ROUTE main.SFInt32Out TO credS.main
DEF HUDManager Script {
  field SFNode HUDs USE HUDs
  field SFNode woncap USE woncap
  directOutput TRUE
  field SFBool wonf FALSE
  eventIn  SFBool shotFinished
  eventOut SFInt32 setHUD
  eventIn SFString won
  eventIn SFBool go
  eventIn SFTime restart
  url "javascript:
    function initialize(){
      setHUD = 0 ;                                                      
    }
    function restart(sftime,tm){
      wonf = FALSE;
    }
    function won(sfstring,tm){
      HUDs.whichChoice = 5;
      woncap.SFStringIn = sfstring;
      wonf = TRUE ;
    }
    function shotFinished(bool,tm){
      setHUD = HUDs.whichChoice == 5 ? 5 : 3;
    }
  "
}
DEF HUDpersonalise Script {  
  eventIn SFBool set_wind
  eventIn SFFloat set_timer
  eventIn SFBool visiWind
  directOutput TRUE
  field SFNode sWind USE sWind
  field SFNode sTimer USE sTimer
  url "javascript:   
    function visiWind(sfbool,tm){
      sWind.choice[0].set_SFBoolOffset = sfbool;
    }
    function set_wind(sfbool,tm){
      sWind.whichChoice = sfbool ? 0 : -1 ;
    }
    function set_timer(sffloat,tm){
      sTimer.whichChoice = sffloat > 0 ? 0 : -1	;
    }

  "
}
ROUTE play.SFInt32Out TO numP.players
ROUTE numP.tanks TO tm.set_tanks     
ROUTE numP.c_players TO play.set_SFInt32Offset 
ROUTE tm.calibrate_tanks TO numP.c_tanks
#ROUTE credits.SFInt32Out TO HUDs.whichChoice
ROUTE ter.viewPoints TO viewS.views
ROUTE proj.visibleOut TO HUDpersonalise.visiWind
ROUTE tm.calibrate_timer TO HUDpersonalise.set_timer
ROUTE proj.calibrate_Wind TO HUDpersonalise.set_wind  
ROUTE main.SFTimeOut TO HUDManager.restart 
ROUTE main.SFInt32Out TO HUDs.whichChoice
ROUTE main.SFBoolOut TO ter.generate    
ROUTE main.SFBoolOut TO ter.visibleIn
ROUTE main.SFBoolOut TO proj.isVisible
ROUTE restart.SFTimeOut TO HUDManager.restart
ROUTE restart.SFInt32Out TO HUDs.whichChoice
ROUTE restart.SFBoolOut TO ter.generate    
ROUTE restart.SFBoolOut TO ter.visibleIn
ROUTE restart.SFBoolOut TO proj.isVisible
ROUTE tm.won TO HUDManager.won
ROUTE tm.tanksDead TO dead.MFStringIn
ROUTE HUDManager.setHUD TO HUDs.whichChoice
#HUD ROUTES
ROUTE prox.position_changed TO prox.set_center
ROUTE prox.position_changed TO xform.set_translation
ROUTE prox.orientation_changed TO xform.set_rotation

#interface ROUTES
ROUTE tm.timerValue TO timer.SFFloatIn   
ROUTE tm.health TO healths.MFFloatIn
ROUTE proj.explosion TO exp.explosion
ROUTE tm.explosionOut TO exp.explosion
ROUTE exp.expRadius TO tm.expRadius
ROUTE exp.expLocation TO tm.expLocation
ROUTE exp.shotFinished TO tm.shotFinished
ROUTE tm.tanks_changed TO ter.set_tanks
ROUTE ter.tankLocations TO tm.tankLocations
ROUTE ter.visibleOut TO tm.visible
ROUTE ter.removeTanks TO tm.removeTanks
ROUTE tm.set_fire_order TO proj.set_fire_order
ROUTE proj.projectileLocation TO ter.projectileLocation
ROUTE ter.collisionHeight TO proj.collisionHeight
ROUTE ter.shotFinished TO tm.shotFinished
ROUTE ter.shotFinished TO proj.shotFinished
                                        
ROUTE regen.SFBoolOut TO ter.generate 
ROUTE options.SFInt32Out TO	HUDs.whichChoice        
ROUTE plctnks.SFInt32Out TO HUDs.whichChoice
ROUTE plctnks.SFTimeOut TO ter.placeTanks     
ROUTE fire.SFTimeOut TO tm.shot_set
ROUTE vertAngle.SFFloatOut TO angleScript.vertAngle
ROUTE horAngle.SFFloatOut TO	angleScript.horAngle
ROUTE vel.SFFloatOut	TO angleScript.vel
ROUTE angleScript.set_angles TO tm.set_angles
ROUTE tm.calibrate_angles TO angleScript.calibrate_angles
ROUTE fire.SFInt32Out TO HUDs.whichChoice
ROUTE exp.shotFinished TO HUDManager.shotFinished
ROUTE ter.shotFinished TO HUDManager.shotFinished
ROUTE exp.explosionOut TO ter.explosion
ROUTE proj.calibrate_gravity TO tm.set_gravity
ROUTE ter.tankHeights TO tm.tankHeights          
ROUTE ter.calibrate_gridSize TO proj.set_gridSize
ROUTE gen.SFBoolOut TO ter.visibleIn
ROUTE gen.SFBoolOut TO ter.generate
ROUTE gen.SFInt32Out TO HUDs.whichChoice       
ROUTE tOptions.SFInt32Out TO HUDs.whichChoice
ROUTE gOptions.SFInt32Out TO HUDs.whichChoice
ROUTE tOptions.SFTimeOut TO ter.calibrateInterface
ROUTE ter.calibrate_Xd TO setxd.set_SFInt32Offset   
ROUTE tSave.SFTimeOut TO setxd.output
ROUTE setxd.SFInt32Out TO ter.set_Xd
ROUTE ter.calibrate_Zd TO setzd.set_SFInt32Offset
ROUTE setzd.SFInt32Out TO ter.set_Zd 
ROUTE tSave.SFTimeOut TO setzd.output
ROUTE ter.calibrate_maxHeight TO setMaxH.set_SFFloatOffset
ROUTE tSave.SFTimeOut TO setMaxH.output
ROUTE setMaxH.SFFloatOut TO ter.set_maxHeight
ROUTE ter.calibrate_shading TO setShade.set_SFBoolOffset
ROUTE tSave.SFTimeOut TO setShade.output
ROUTE setShade.SFBoolOut TO ter.set_shading
ROUTE ter.calibrate_animGen TO setAnimGen.set_SFBoolOffset   
ROUTE tSave.SFTimeOut TO setAnimGen.output
ROUTE setAnimGen.SFBoolOut TO ter.set_animGen
ROUTE ter.calibrate_smooth TO setSmooth.set_SFInt32Offset  
ROUTE tSave.SFTimeOut TO setSmooth.output
ROUTE setSmooth.SFInt32Out TO ter.set_smooth
ROUTE ter.calibrate_baseColor TO setBaseColor.set_SFInt32Offset
ROUTE tSave.SFTimeOut TO setBaseColor.output
ROUTE setBaseColor.SFInt32Out TO ter.set_baseColor
ROUTE ter.calibrate_whiteFade TO setFadeWhite.set_SFBoolOffset
ROUTE tSave.SFTimeOut TO setFadeWhite.output
ROUTE setFadeWhite.SFBoolOut TO ter.set_whiteFade
ROUTE ter.calibrate_paintBall TO setPaintBall.set_SFBoolOffset
ROUTE tSave.SFTimeOut TO setPaintBall.output   
ROUTE setPaintBall.SFBoolOut TO ter.set_paintBall  
ROUTE ter.calibrate_terrainDamage TO setTerrainD.set_SFBoolOffset
ROUTE tSave.SFTimeOut TO setTerrainD.output
ROUTE setTerrainD.SFBoolOut TO ter.set_terrainDamage
ROUTE gOptions.SFTimeOut TO proj.calibrateInterface
ROUTE gOptions.SFTimeOut TO tm.calibrateInterface
ROUTE proj.calibrate_gravity TO setGravity.set_SFFloatOffset
ROUTE gSave.SFTimeOut TO setGravity.output
ROUTE setGravity.SFFloatOut TO proj.set_gravity   
ROUTE proj.calibrate_plotLines TO setPlotLines.set_SFBoolOffset
ROUTE gSave.SFTimeOut TO setPlotLines.output
ROUTE setPlotLines.SFBoolOut TO proj.set_plotLines   
ROUTE tm.calibrate_timer TO setTimer.set_SFFloatOffset
ROUTE gSave.SFTimeOut TO setTimer.output
ROUTE setTimer.SFFloatOut TO tm.set_timer   
ROUTE tm.calibrate_passShot TO setPassShot.set_SFBoolOffset
ROUTE gSave.SFTimeOut TO setPassShot.output
ROUTE setPassShot.SFBoolOut TO tm.set_passShot
ROUTE proj.calibrate_pcChanged TO setChange.set_SFFloatOffset
ROUTE gSave.SFTimeOut TO setChange.output
ROUTE setChange.SFFloatOut TO proj.set_pcChange 
ROUTE proj.calibrate_Strength TO setIntensity.set_SFFloatOffset
ROUTE gSave.SFTimeOut TO setIntensity.output
ROUTE setIntensity.SFFloatOut TO proj.set_Strength     
ROUTE proj.calibrate_animScale TO setAnim.set_SFFloatOffset
ROUTE gSave.SFTimeOut TO setAnim.output
ROUTE setAnim.SFFloatOut TO proj.set_animScale  
ROUTE ter.calibrate_gos TO setGos.set_SFBoolOffset
ROUTE tSave.SFTimeOut TO setGos.output
ROUTE setGos.SFBoolOut TO ter.set_gos     
ROUTE tm.isVisible TO proj.isVisible
ROUTE tm.regen TO proj.regen
ROUTE showWind.SFBoolOut TO proj.isVisible
ROUTE tm.sfOut TO proj.shotFinished            
ROUTE main.SFTimeOut TO ter.createViews
ROUTE proj.calibrate_bind TO setPBind.set_SFBoolOffset   
ROUTE setPBind.SFBoolOut TO proj.set_bind
ROUTE tm.calibrate_bind TO setTBind.set_SFBoolOffset
ROUTE gSave.SFTimeOut TO setTBind.output
ROUTE setTBind.SFBoolOut TO tm.set_bind
ROUTE ter.calibrate_paintBall TO proj.set_pbm
ROUTE ter.calibrate_paintBall TO exp.set_pbm
ROUTE regen.SFInt32Out TO HUDs.whichChoice
